{"version":3,"sources":["components/common/utils/accessToken.js","components/common/utils/userState.js","components/common/state/UserStateReducer.js","components/activity/state/ActivityReducer.js","components/meal_form/state/MealFormReducer.js","components/health_check_form/state/healthCheckFormReducer.js","components/login_form/state/loginFormReducer.js","components/user_menu/state/UserMenuReducer.js","components/common/state/ViewReducer.js","components/common/utils/formValidation.js","components/register_form/state/registerFormReducer.js","components/common/state/RootReducer.js","components/common/state/Store.js","components/common/utils/api.js","components/common/state/UserStateActions.js","components/login_form/state/loginFormActions.js","components/register_form/state/registerFormActions.js","components/register_form/state/RegisterInput.jsx","components/register_form/registerForm.jsx","components/login_form/LoginForm.jsx","components/user_menu/UserMenu.jsx","components/user_menu/state/UserMenuActions.js","components/header/Header.jsx","components/common/state/ViewActions.js","components/Sidebar.jsx","components/Pill.jsx","components/common/utils/DateHandler.js","components/meal_form/state/MealFormActions.js","components/activity/state/ActivityActions.js","components/health_check_form/state/healthCheckFormActions.js","components/activity/ManageEntry.jsx","components/activity/MealEntry.jsx","components/activity/HealthCheckEntry.jsx","components/activity/DateBlock.jsx","components/activity/AddButtonsContainer.jsx","components/common/InputAutoComplete.jsx","components/IngredientPill.jsx","components/meal_form/MealForm.jsx","components/activity/utils/feedArray.js","components/health_check_form/HealthCheckForm.jsx","components/activity/Activity.jsx","components/Dashboard.jsx","components/App.jsx","index.js"],"names":["AccessToken","value","jwt_decode","exp","username","firstName","lastName","this","Math","ceil","Date","now","getCurrSeconds","refresh","a","fetch","response","status","json","error","Error","token","UserState","expired","accessToken","isLoggedIn","initialState","data","loading","show","ingredients","time","mealType","_id","new","edit","timeString","dateString","symptoms","mood","password","invalidPassword","invalidUsername","activity","active","filter","errorMessage","test","valid","name","intitalInputState","touched","email","passwordVerify","rootReducer","combineReducers","state","action","type","payload","mealForm","ingredient","healthCheckForm","symptom","loginForm","userMenu","console","log","view","registerForm","outputState","Object","keys","forEach","key","hasOwnProperty","middleWare","compose","applyMiddleware","thunk","store","createStore","composeWithDevTools","dispatch","getState","getHeaders","Authorization","get","route","attemptLogIn","method","headers","post","body","JSON","stringify","put","deleteByID","setUserState","setLoginForm","setRegisterForm","validateRegisterForm","RegisterInput","props","validationCallback","placeholder","capitalize","validated","trimWhitespace","lowercase","handleBlur","onBlur","handleChange","onChange","Form","Group","Control","isInvalid","isValid","e","target","_","trim","toLower","split","reduce","acc","substring","upperFirst","Feedback","RegisterForm","useState","processing","setProcessing","useDispatch","useSelector","handleSubmit","preventDefault","registerPayload","Modal","onHide","onSubmit","noValidate","Header","Title","Body","className","Row","Col","xs","validate","Footer","Button","variant","onClick","disabled","Login","message","md","UserMenu","loggingOut","setLoggingOut","style","marginLeft","color","borderColor","Offcanvas","placement","closeButton","userState","Container","fluid","sm","ViewActivity","Sidebar","href","Pill","text","stringToUnixTime","date","dayjs","unix","unixToDateString","unixTime","format","unixToTimeString","formChange","setActivity","API","fromEntries","map","entry","ManageEntry","endpoint","currentEntry","editMeal","id","editHealthCheck","extend","customParseFormat","MealEntry","index","HealthCheckEntry","description","DateBlock","entries","AddButtonsContainer","InputAutoComplete","defaultInputValue","submit","apiEndpoint","allowNewItems","suggestions","clearOnSubmit","isLoading","setIsLoading","options","setOptions","setValue","query","startCase","lowerCase","url","submitHandler","length","outputValue","newItem","label","postValue","selectHintOnEnter","minLength","allowNew","delay","newSelectionPrefix","selected","onSearch","IngredientPill","primaryText","MealForm","newMeal","handleClose","newIngredient","includes","create","dataObject","val","sort","b","toSortedArray","isYesterday","isToday","oneWeekAgo","subtract","isAfter","toDate","lastSubArray","unshift","push","HealthCheckForm","handleMoodSelect","newHealthCheck","ButtonGroup","display","newSymptom","Activity","useEffect","activityFeed","FeedArray","dateBlock","Dashboard","position","App","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.2b6f8c0d.chunk.js","sourcesContent":["import jwt_decode from 'jwt-decode';\n\nexport class AccessToken {\n    constructor(value){\n        let {exp, username, firstName, lastName} = jwt_decode(value)\n        this.value = value;\n        this.exp = exp\n        this.username = username\n        this.firstName = firstName\n        this.lastName = lastName\n    }\n    getCurrSeconds() {\n        return Math.ceil(Date.now() / 1000);\n    }\n    expired(){\n        if(this.exp < this.getCurrSeconds() + 10){\n            return true;\n        }\n        return false\n    }\n}\n\nexport async function refresh() {\n    let response = await fetch('/access');\n    if (response.status !== 200) {\n        let error = await response.json();\n        throw new Error(error);\n    }\n    let token = await response.json();\n    return new AccessToken(token)\n}\n\nexport function decode(token) {\n    let { username, firstName, lastName } = jwt_decode(token);\n    console.log(firstName)\n    return {\n        username,\n        firstName,\n        lastName,\n        accessToken: token,\n        isLoggedIn: true,\n    };\n}\n","export default class UserState {\n    constructor(token) {\n        if (token && !token.expired()) {\n            this.accessToken = token;\n            let { username, firstName, lastName } = token;\n            this.username = username;\n            this.firstName = firstName;\n            this.lastName = lastName;\n            this.isLoggedIn = true\n        } else {\n            this.accessToken = null\n            this.username = '';\n            this.firstName = '';\n            this.lastName = '';\n            this.isLoggedIn = false\n        }\n    }\n}\n","import UserState from 'components/common/utils/userState'\n\nconst initialState = new UserState()\n\nexport default function UserStateReducer(state = initialState, action){\n    switch (action.type){\n        case 'USERSTATE/SET':\n            return action.payload\n        default: return state\n    }\n}","const initialState = { data: {}, loading: false };\n\nexport default function ActivityReducer(state = initialState, action) {\n    switch (action.type) {\n        case 'ACTIVITY/SET_DATA':\n            return { ...action.payload }\n        case 'ACTIVITY/LOADING':\n            return { ...state, loading: true}\n        default:\n            return state;\n    }\n}\n","const initialState = {\n    show: false,\n    ingredients: [],\n    time: '',\n    mealType: '',\n    _id: '',\n    new: false,\n    edit: false,\n    timeString: '',\n    dateString: '',\n};\n\nexport default function MealFormReducer(state = initialState, action) {\n    let { payload } = action;\n    switch (action.type) {\n        case 'MEAL_FORM/EDIT':\n            return { ...initialState, ...payload };\n        case 'MEAL_FORM/NEW':\n            return { ...initialState, ...payload };\n        case 'MEAL_FORM/CHANGE':\n            return { ...state, ...payload };\n        case 'MEAL_FORM/CLOSE':\n            return { ...initialState };\n        case 'MEAL_FORM/DELETE_INGREDIENT':\n            let ingredients = state.ingredients.filter(\n                (ingredient) => ingredient !== payload\n            );\n            return {\n                ...state,\n                ingredients,\n            };\n        default:\n            return state;\n    }\n}\n","const initialState = {\n    show: false,\n    symptoms: [],\n    time: '',\n    mood: null,\n    _id: '',\n    new: false,\n    edit: false,\n    dateString: '',\n    timeString: '',\n};\n\nexport default function HealtCheckFormReducer(state = initialState, action) {\n    let { payload } = action;\n    switch (action.type) {\n        case 'HEALTH_CHECK_FORM/EDIT':\n            return { ...initialState, ...payload };\n        case 'HEALTH_CHECK_FORM/NEW':\n            return { ...initialState, ...payload };\n        case 'HEALTH_CHECK_FORM/DELETE_SYMPTOM':\n            let symptoms = state.symptoms.filter(\n                (symptom) => symptom !== payload\n            );\n            return { ...state, symptoms };\n        case 'HEALTH_CHECK_FORM/CHANGE':\n            return { ...state, ...payload };\n        case 'HEALTH_CHECK_FORM/CLOSE':\n            return { ...initialState };\n        default:\n            return state;\n    }\n}\n","const initialState = {\n    username: '',\n    password: '',\n    show: false,\n    invalidPassword: false,\n    invalidUsername: false,\n};\n\nexport default function LoginFormReducer(state = initialState, action) {\n    let payload = action.payload;\n    switch (action.type) {\n        case 'LOGIN_FORM/SET':\n            return { ...state, ...payload };\n        case 'LOGIN_FORM/SHOW':\n            return { ...state, show: true };\n        case 'LOGIN_FORM/RESET':\n            return { ...initialState };\n        default:\n            return state;\n    }\n}\n","const initialState = {\n    show: false\n};\n\nexport default function UserOptionsReducer(state = initialState, action) {\n    let payload = action.payload;\n    switch (action.type) {\n        case 'USER_MENU/SHOW':\n            console.log('showing')\n            return {...state, show: true};\n        case 'USER_MENU/HIDE':\n            console.log('hiding')\n            return {...state, show: false};\n        default:\n            return state;\n    }\n}\n","const initialState = {\n    activity: {\n        active: true,\n        filter: 'all'\n    }\n};\n\n\nexport default function ViewReducer(state = initialState, action) {\n    let payload = action.payload\n    switch (action.type) {\n        case 'VIEW/ACTIVITY':\n            return { ...initialState, ...payload };\n        default:\n            return state;\n    }\n}\n","import { validate as validateEmail } from 'email-validator';\n\nexport function password(value) {\n    let errorMessage = 'Password must be at least 8 characters with at least one capital letter and one number'\n    if (/\\s/.test(value)) {\n        return { valid: false, error: 'Password cannot contain spaces. ' + errorMessage }\n    }\n    if (!/^\\S{8,}$/i.test(value)) {\n        return { valid: false, error: errorMessage };\n    }\n    if (!/[A-Z]/.test(value)) {\n        return { valid: false, error: errorMessage }\n    }\n    if (!/\\d/.test(value)) {\n        return { valid: false, error: errorMessage }\n    }\n    return { valid: true, error: '' };\n}\n\nexport function email(value) {\n    let valid = validateEmail(value);\n    let error = valid ? '' : 'Invalid Email Address';\n    return { valid, error };\n}\n\nexport function name(value) {\n    let valid = /^\\w{1,}/i.test(value);\n    let error = valid ? '' : 'Invalid Name';\n    return { valid, error };\n}\n","import { Password } from 'components/common/utils/formValidation';\nconst intitalInputState = { value: '', valid: false, touched: false, error: 'Required Field' };\nconst initialState = {\n    show: false,\n    firstName: { ...intitalInputState },\n    lastName: { ...intitalInputState },\n    email: { ...intitalInputState, valid: true },\n    username: { ...intitalInputState },\n    password: { ...intitalInputState },\n    passwordVerify: { ...intitalInputState },\n};\n\nexport default function RegisterFormReducer(state = initialState, action) {\n    let payload = action.payload;\n    switch (action.type) {\n        case 'REGISTER_FORM/SHOW':\n            return { ...state, show: true };\n        case 'REGISTER_FORM/HIDE':\n            return { ...state, show: false };\n        case 'REGISTER_FORM/SET':\n            return { ...state, ...payload };\n        case 'REGISTER_FORM/VALIDATE':\n            return { ...state, ...payload };\n        case 'REGISTER_FORM/TOUCH_ALL':\n            let outputState = {...state}\n            let response = Object.keys(state).forEach((key)=>{\n                if(outputState[key].hasOwnProperty('touched')){\n                    outputState[key].touched = true;\n                }\n            })\n            return outputState\n        default:\n            return { ...state };\n    }\n}\n","import {combineReducers} from 'redux'\nimport UserStateReducer from 'components/common/state/UserStateReducer'\nimport ActivityReducer from 'components/activity/state/ActivityReducer.js'\nimport MealFormReducer from 'components/meal_form/state/MealFormReducer.js'\nimport HealthCheckFormReducer from 'components/health_check_form/state/healthCheckFormReducer'\nimport LoginFormReducer from 'components/login_form/state/loginFormReducer'\nimport UserMenuReducer from 'components/user_menu/state/UserMenuReducer'\nimport ViewReducer from './ViewReducer'\nimport RegisterFormReducer from 'components/register_form/state/registerFormReducer'\n\nconst rootReducer = combineReducers({\n    UserState: UserStateReducer,\n    activity: ActivityReducer,\n    mealForm: MealFormReducer,\n    healthCheckForm: HealthCheckFormReducer,\n    loginForm: LoginFormReducer,\n    userMenu: UserMenuReducer,\n    view: ViewReducer,\n    registerForm: RegisterFormReducer\n})\n\nexport default rootReducer","import { createStore, applyMiddleware, compose } from 'redux';\nimport rootReducer from './RootReducer.js';\nimport thunk from 'redux-thunk';\nimport { composeWithDevTools } from 'redux-devtools-extension';\n\nconst middleWare = compose(applyMiddleware(thunk));\n\nconst store = createStore(rootReducer, composeWithDevTools(middleWare));\n\nexport default store;\n","import { attemptLogIn } from '../state/UserStateActions.js';\nimport store from '../state/Store.js';\n\nlet dispatch = store.dispatch;\n\nfunction token() {\n    return store.getState().UserState.accessToken;\n}\n\nexport function getHeaders() {\n    return {\n        'Content-Type': 'application/json',\n        Authorization: `Bearer ${token().value}`,\n    };\n}\n\n\nexport async function get(route) {\n    if (token().expired()) await dispatch(attemptLogIn());\n    console.log('api get: ' + route);\n    let response = await fetch(`/api/${route}`, {\n        method: 'GET',\n        headers: getHeaders(),\n    });\n    return await response.json();\n}\n\nexport async function post(route, data) {\n    if (token().expired()) await dispatch(attemptLogIn());\n    console.log('api post: ' + route);\n    let response = await fetch(`/api/${route}`, {\n        method: 'POST',\n        headers: getHeaders(),\n        body: JSON.stringify(data),\n    });\n    return await response.json();\n}\n\nexport async function put(route, data) {\n    if (token().expired()) await dispatch(attemptLogIn());\n    let response = await fetch(`/api/${route}`, {\n        method: 'PUT',\n        headers: getHeaders(),\n        body: JSON.stringify(data),\n    });\n    return await response.json();\n}\n\nexport async function deleteByID(route, _id) {\n    if (token().expired()) await dispatch(attemptLogIn());\n    let response = await fetch(`/api/${route}/${_id}`, {\n        method: 'DELETE',\n        headers: getHeaders(),\n    });\n    return await response.json();\n}\n","import * as accessToken from 'components/common/utils/accessToken.js';\nimport UserState from 'components/common/utils/userState';\nimport { hideUserOptions } from 'components/user_menu/state/UserMenuActions';\nimport { getHeaders } from '../utils/api';\n\nexport function setUserState(payload) {\n    return {\n        type: 'USERSTATE/SET',\n        payload,\n    };\n}\n\nexport function attemptLogIn() {\n    console.log('attempting login');\n    return async (dispatch, getState) => {\n        try {\n            let token = await accessToken.refresh(); //return access token object\n            dispatch(setUserState(new UserState(token)));\n        } catch (error) {\n            console.log('no refresh token, login required');\n            dispatch(setUserState(new UserState()));\n        }\n    };\n}\n\nexport function LogOut() {\n    return async (dispatch, getState) => {\n        const token = () => getState().UserState.accessToken;\n        try {\n            if (token().expired()) await dispatch(attemptLogIn());\n            await fetch('/logout', {\n                headers: getHeaders(),\n            });\n            dispatch(hideUserOptions())\n            dispatch(setUserState(new UserState()));\n        } catch (error) {\n            console.error(error)\n        }\n    };\n}\n","import { AccessToken } from 'components/common/utils/accessToken.js';\nimport { setUserState } from 'components/common/state/UserStateActions.js';\nimport UserState from 'components/common/utils/userState';\n\nexport function showLoginForm(payload) {\n    return {\n        type: 'LOGIN_FORM/SHOW',\n    };\n}\n\nexport function setLoginForm(payload) {\n    return {\n        type: 'LOGIN_FORM/SET',\n        payload,\n    };\n}\nexport function resetLoginForm() {\n    return {\n        type: 'LOGIN_FORM/RESET',\n    };\n}\n\nexport function logIn() {\n    return async (dispatch, getState) => {\n        try {\n            let { username, password } = getState().loginForm;\n            let response = await fetch('/login', {\n                method: 'POST',\n                headers: { 'Content-type': 'application/json' },\n                body: JSON.stringify({ username, password }),\n            });\n            if (response.status !== 200) {\n                let errorMessage = await response.json();\n                throw new Error(errorMessage);\n            }\n            let token = new AccessToken(await response.json());\n            dispatch(setUserState(new UserState(token)));\n            dispatch(resetLoginForm());\n        } catch (error) {\n            console.log(error);\n            if (error.message === 'invalid username') {\n                dispatch(setLoginForm({ invalidPassword: false, invalidUsername: true }));\n            }\n            if (error.message === 'invalid password') {\n                dispatch(setLoginForm({ invalidPassword: true, invalidUsername: false }));\n            }\n        }\n    };\n}\n","export function showRegisterForm(){\n    return {\n        type: 'REGISTER_FORM/SHOW'\n    }\n}\nexport function hideRegisterForm(){\n    return {\n        type: 'REGISTER_FORM/HIDE'\n    }\n}\nexport function setRegisterForm(payload){\n    return {\n        type: 'REGISTER_FORM/SET',\n        payload\n    }\n}\nexport function validateRegisterForm(payload){\n    return {\n        type: 'REGISTER_FORM/VALIDATE',\n        payload\n    }\n}\nexport function touchAllInputs(){\n    return {\n        type: \"REGISTER_FORM/TOUCH_ALL\",\n    }\n}","import React from 'react';\nimport Form from 'react-bootstrap/Form';\nimport _ from 'lodash';\n\nexport default function RegisterInput(props) {\n    let { name, state, validationCallback, placeholder, capitalize, type, validated, trimWhitespace, lowercase} = props;\n    let handleBlur = props.onBlur;\n    let handleChange = props.onChange;\n    return (\n        <Form.Group>\n            <Form.Control\n                name={name}\n                value={state.value}\n                isInvalid={validated && state.touched && !state.valid}\n                isValid={validated && state.touched && state.valid}\n                onBlur={(e) => {\n                    let value = e.target.value;\n                    if (value) handleBlur(e, validationCallback);\n                }}\n                onChange={(e) => {\n                    let { name, value } = e.target;\n                    //if capitalize prop is true, and last character typed is a letter char\n                    if (trimWhitespace) value = _.trim(value)\n                    if (lowercase) value = _.toLower(value)\n                    if (capitalize && /\\w$/.test(value)) {\n                        value = value.split(/([\\s-_.])/).reduce((acc, substring) => {\n                            return acc + _.upperFirst(substring);\n                        }, '');\n                        value = _.trim(value);\n                    }\n                    handleChange({ name, value });\n                }}\n                type={type}\n                placeholder={placeholder}\n            />\n            <Form.Control.Feedback type=\"invalid\">{state.error}</Form.Control.Feedback>\n            <Form.Control.Feedback type=\"valid\">{state.error}</Form.Control.Feedback>\n        </Form.Group>\n    );\n}\n","import { useState } from 'react';\nimport React from 'react';\nimport Modal from 'react-bootstrap/Modal';\nimport Row from 'react-bootstrap/Row';\nimport Col from 'react-bootstrap/Col';\nimport Form from 'react-bootstrap/Form';\nimport { useDispatch, useSelector } from 'react-redux';\nimport {\n    hideRegisterForm,\n    setRegisterForm,\n    touchAllInputs,\n    validateRegisterForm,\n} from './state/registerFormActions';\nimport Button from 'react-bootstrap/Button';\nimport './RegisterForm.scss';\nimport * as validate from 'components/common/utils/formValidation';\nimport RegisterInput from './state/RegisterInput';\nimport { AccessToken } from '../common/utils/accessToken.js';\nimport UserState from 'components/common/utils/userState';\nimport { setUserState } from 'components/common/state/UserStateActions';\nimport _ from 'lodash';\n\nexport default function RegisterForm() {\n    let [processing, setProcessing] = useState(false);\n    const dispatch = useDispatch();\n    let state = useSelector((state) => state.registerForm);\n\n    async function handleSubmit(e) {\n        e.preventDefault();\n        dispatch(touchAllInputs());\n        if (!state.password.valid) return;\n        if (!state.passwordVerify.valid) return;\n        if (!state.username.valid) return;\n        if (!state.firstName.valid) return;\n        if (!state.lastName.valid) return;\n        let registerPayload = {\n            username: _.toLower(_.trim(state.username.value)),\n            firstName: _.trim(state.firstName.value),\n            lastName: _.trim(state.lastName.value),\n            password: _.trim(state.password.value)\n        };\n        console.log(registerPayload)\n        setProcessing(true)\n        try {\n            let response = await fetch('/register', {\n                method: 'POST',\n                headers: { 'Content-Type': 'application/json' },\n                body: JSON.stringify(registerPayload),\n            });\n            if(response.status !== 200) throw new Error(`Error ${response.status}`)\n            console.log('success')\n            let token = new AccessToken(await response.json());\n            dispatch(setUserState(new UserState(token)))\n        } catch (error) {\n            setProcessing(false)\n            console.log(error)\n        }\n    }\n\n    async function handleChange({ name, value }) {\n        dispatch(setRegisterForm({ [name]: { value } }));\n    }\n\n    async function handleBlur(e, validationCallback) {\n        let { name, value } = e.target;\n        let { valid, error } = await validationCallback(value);\n        dispatch(validateRegisterForm({ [name]: { value, valid, touched: true, error } }));\n    }\n\n    return (\n        <Modal show={state.show} onHide={() => dispatch(hideRegisterForm())}>\n            <Form onSubmit={handleSubmit} noValidate>\n                <Modal.Header>\n                    <Modal.Title>Sign Up!</Modal.Title>\n                </Modal.Header>\n                <Modal.Body className=\"register-form-container\">\n                    <h6>Personal info:</h6>\n                    <Row>\n                        <Col xs={6}>\n                            <RegisterInput\n                                state={state.firstName}\n                                name=\"firstName\"\n                                capitalize\n                                validated\n                                placeholder=\"First Name\"\n                                validationCallback={validate.name}\n                                onChange={handleChange}\n                                onBlur={handleBlur}\n                            />\n                        </Col>\n                        <Col xs={6}>\n                            <RegisterInput\n                                state={state.lastName}\n                                name=\"lastName\"\n                                validated\n                                placeholder=\"Last Name\"\n                                validationCallback={validate.name}\n                                capitalize\n                                onChange={handleChange}\n                                onBlur={handleBlur}\n                            />\n                        </Col>\n                    </Row>\n                    <Row>\n                        <Col xs={12}>\n                            {/* <RegisterInput\n                                state={state.email}\n                                name=\"email\"\n                                placeholder=\"Email\"\n                                validationCallback={(validate.email)}\n                                onChange={handleChange}\n                                onBlur={handleBlur}\n                            /> */}\n                        </Col>\n                    </Row>\n                    <hr />\n                    <h6>Account Info:</h6>\n                    <Row>\n                        <Col xs={12}>\n                            <RegisterInput\n                                state={state.username}\n                                name=\"username\"\n                                validated\n                                trimWhitespace\n                                lowercase\n                                placeholder=\"Username\"\n                                validationCallback={async (value) => {\n                                    if (!/^\\w{1,}$/i.test(value))\n                                        return { valid: false, error: 'Invalid Username' };\n                                    let response = await fetch('validation/username/' + value);\n                                    let valid = await response.json();\n                                    let error = valid\n                                        ? 'Username is available'\n                                        : 'Username is not available';\n                                    return { valid, error };\n                                }}\n                                onChange={handleChange}\n                                onBlur={handleBlur}\n                            />\n                        </Col>\n                    </Row>\n                    <Row>\n                        <Col xs={12}>\n                            <RegisterInput\n                                type=\"password\"\n                                state={state.password}\n                                name=\"password\"\n                                validated\n                                placeholder=\"Password\"\n                                validationCallback={validate.password}\n                                onChange={handleChange}\n                                onBlur={handleBlur}\n                            />\n                        </Col>\n                    </Row>\n                    <Row>\n                        <Col xs={12}>\n                            <RegisterInput\n                                type=\"password\"\n                                state={state.passwordVerify}\n                                name=\"passwordVerify\"\n                                validated\n                                placeholder=\"Verify Password\"\n                                validationCallback={(value) => {\n                                    let valid = state.password.value === value;\n                                    let error = valid ? '' : 'Passwords do not match';\n                                    return { valid, error };\n                                }}\n                                onChange={handleChange}\n                                onBlur={handleBlur}\n                            />\n                        </Col>\n                    </Row>\n                </Modal.Body>\n                <Modal.Footer>\n                    <Button variant=\"secondary\" onClick={() => dispatch(hideRegisterForm())}>\n                        Cancel\n                    </Button>\n                    <Button\n                        onClick={handleSubmit}\n                        type=\"submit\"\n                        disabled={processing}\n                        variant=\"success\">\n                        {processing ? 'Creating Account' : 'Create Account'}\n                    </Button>\n                </Modal.Footer>\n            </Form>\n        </Modal>\n    );\n}\n","import React from 'react';\nimport './LoginForm.scss';\nimport Form from 'react-bootstrap/Form';\nimport Row from 'react-bootstrap/Row';\nimport Col from 'react-bootstrap/Col';\nimport Button from 'react-bootstrap/Button';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { setLoginForm, logIn } from './state/loginFormActions';\nimport { showRegisterForm } from 'components/register_form/state/registerFormActions';\nimport RegisterForm from 'components/register_form/registerForm';\n\nexport default function Login() {\n    let state = useSelector((state) => state.loginForm);\n\n    const dispatch = useDispatch();\n\n    return (\n        <div className=\"login-container\">\n            <Form\n                className=\"form\"\n                onSubmit={(e) => {\n                    e.preventDefault()\n                    console.log('signing in');\n                    dispatch(logIn());\n                }}>\n                <div className=\"login\">\n                    <Row className=\"form-row\">\n                        <Col md=\"auto\">\n                            <Form.Control\n                                isInvalid={state.invalidUsername}\n                                name=\"username\"\n                                className=\"username\"\n                                placeholder=\"User Name\"\n                                value={state.username}\n                                onChange={(e) => {\n                                    dispatch(setLoginForm({ username: e.target.value }));\n                                }}\n                            />\n                        </Col>\n                        <Col className=\"filler\" xs={12}></Col>\n                        <Col md=\"auto\">\n                            <Form.Control\n                                isInvalid={state.invalidPassword}\n                                name=\"password\"\n                                className=\"password\"\n                                type=\"password\"\n                                value={state.password}\n                                onChange={(e) => {\n                                    dispatch(setLoginForm({ password: e.target.value }));\n                                }}\n                                placeholder=\"Password\"\n                            />\n                        </Col>\n                        <Col className=\"filler\" xs={12}></Col>\n                        <Col xs={8} md=\"auto\">\n                            <Button\n                                type=\"submit\"\n                                className=\"login-button\"\n                                variant=\"light\">\n                                Sign In\n                            </Button>\n                        </Col>\n                        <Col xs={4} md=\"auto\">\n                            <Button\n                                onClick={() => dispatch(showRegisterForm())}\n                                className=\"signup-button\"\n                                variant=\"success\">\n                                Sign Up\n                            </Button>\n                            <RegisterForm />\n                        </Col>\n                    </Row>\n                </div>\n            </Form>\n        </div>\n    );\n}\n","import React from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { hideUserOptions, showUserOptions } from './state/UserMenuActions';\nimport Button from 'react-bootstrap/Button';\nimport Offcanvas from 'react-bootstrap/Offcanvas';\nimport './UserMenu.scss';\nimport { LogOut } from 'components/common/state/UserStateActions';\nimport { useState } from 'react';\n\nexport default function UserMenu() {\n    let state = useSelector((state) => state.userMenu);\n    let [loggingOut, setLoggingOut] = useState(false);\n    const dispatch = useDispatch();\n    return (\n        <div>\n            <h4>\n                Hello, {useSelector((state) => state.UserState.firstName)}\n                <Button\n                    variant=\"outline-dark\"\n                    style={{ marginLeft: '20px', color: 'inherit', borderColor: 'inherit' }}\n                    onClick={() => dispatch(showUserOptions())}>\n                    <i className=\"fas fa-bars\"></i>\n                </Button>\n            </h4>\n            <Offcanvas\n                className=\"user-menu\"\n                show={state.show}\n                onHide={() => dispatch(hideUserOptions())}\n                placement=\"end\">\n                <Offcanvas.Header closeButton>\n                    <Offcanvas.Title>Your Account</Offcanvas.Title>\n                </Offcanvas.Header>\n                <Offcanvas.Body>\n                    <div className=\"options-container\">\n                        <ul>\n                            <li>\n                                <button className=\"link\">Account Settings</button>\n                            </li>\n                            <li>\n                                <button className=\"link\">Help</button>\n                            </li>\n                        </ul>\n                    </div>\n                    <div className=\"logout-button-container\">\n                        <hr />\n                        <Button\n                            disabled={loggingOut}\n                            variant=\"default\"\n                            className=\"logout\"\n                            onClick={ async () => {\n                                setLoggingOut(true)\n                                await dispatch(LogOut());\n                            }}>\n                            {loggingOut ? 'Logging Out' : 'Log Out'}\n                        </Button>\n                    </div>\n                </Offcanvas.Body>\n            </Offcanvas>\n        </div>\n    );\n}\n","export function showUserOptions(){\n    return {\n        type: 'USER_MENU/SHOW'\n    }\n}\nexport function hideUserOptions(){\n    return {\n        type: 'USER_MENU/HIDE'\n    }\n}","import React from 'react';\nimport LoginForm from '../login_form/LoginForm';\nimport './Header.scss';\nimport Container from 'react-bootstrap/Container';\nimport Row from 'react-bootstrap/Row';\nimport Col from 'react-bootstrap/Col';\n//import CurrentUser from 'components/header/CurrentUser'\nimport UserMenu from 'components/user_menu/UserMenu';\nimport { useSelector } from 'react-redux';\n\n\nexport default function Header() {\n    let userState = useSelector(state => state.UserState)\n\n    return (\n        <Container fluid className=\"header-container\">\n            <Row className=\"header\">\n                <Col xs={12} sm=\"auto\" className=\"logo\">\n                    Food <span className=\"x\" >x</span> Mood\n                </Col>\n                <Col xs={12} md={true} className=\"filler\"></Col>\n                <Col xs={12} md={'auto'} className=\"login\">\n                    {userState.isLoggedIn ? <UserMenu /> : <LoginForm/>}\n                </Col>\n            </Row>\n            \n        </Container>\n    );\n}\n","export function ViewActivity(filter){\n    return {\n        type: 'VIEW/ACTIVITY',\n        payload: {\n            activity: {\n                active: true,\n                filter\n            }\n        }\n    }\n}","import React from 'react';\nimport './Sidebar.scss';\nimport { useDispatch } from 'react-redux';\nimport { ViewActivity } from './common/state/ViewActions';\n\nexport default function Sidebar(props) {\n    let dispatch = useDispatch();\n    return (\n        <div className=\"sidebar-container\">\n            <div className=\"nav-group\">\n                <div className=\"nav-group-title\">\n                    <h5>Your Log</h5>\n                </div>\n                <div\n                    onClick={() => {\n                        dispatch(ViewActivity('all'))\n                    }}\n                    className=\"nav-item\">\n                    <a href=\"#\">All Activity</a>\n                </div>\n                <div\n                    onClick={() => {\n                        dispatch(ViewActivity('meals'))\n                    }}\n                    className=\"nav-item\">\n                    <a href=\"#\">Meals</a>\n                </div>\n                <div\n                    onClick={() => {\n                        dispatch(ViewActivity('health-checks'))\n                    }}\n                    className=\"nav-item\">\n                    <a href=\"#\">Wellness</a>\n                </div>\n                <div className=\"nav-item-catagory\"></div>\n            </div>\n            <div className=\"nav-group\">\n                <div className=\"nav-group-title\">\n                    <h5>Analysis</h5>\n                </div>\n                <div className=\"nav-item\">\n                    <a href=\"#\">Food Items</a>\n                </div>\n                <div className=\"nav-item\">\n                    <a href=\"#\">Symptoms</a>\n                </div>\n                <div className=\"nav-item-catagory\"></div>\n            </div>\n        </div>\n    );\n}\n","import React from 'react';\nimport './Pill.scss';\n\nexport default function Pill(props) {\n    return (\n        <div className=\"pill\">\n            <div className={`pill-primary ${props.color}`}>{props.text}</div>\n        </div>\n    );\n}\n","import dayjs from 'dayjs';\nimport customParseFormat from 'dayjs/plugin/customParseFormat';\ndayjs().format();\ndayjs.extend(customParseFormat);\n\nexport function stringToUnixTime(date, time) {\n    return dayjs(`${date} ${time}`, 'YYYY-MM-DD HH:mm').unix();\n}\nexport function unixToDateString(unixTime = dayjs().unix()) {\n    return dayjs.unix(unixTime).format('YYYY-MM-DD');\n}\nexport function unixToTimeString(unixTime = dayjs().unix()) {\n    return dayjs.unix(unixTime).format('HH:mm');\n}\n","import store from 'components/common/state/Store';\nimport { unixToDateString, unixToTimeString } from 'components/common/utils/DateHandler';\n\nexport function editMeal(_id) {\n    let currentEntry = store.getState().activity.data[_id];\n    return {\n        type: 'MEAL_FORM/EDIT',\n\n        payload: {\n            edit: true,\n            show: true,\n            ...currentEntry,\n            timeString: unixToTimeString(currentEntry.time),\n            dateString: unixToDateString(currentEntry.time),\n        },\n    };\n}\n\nexport function formChange(payload) {\n    return {\n        type: 'MEAL_FORM/CHANGE',\n        payload,\n    };\n}\n\nexport function deleteIngredient(payload) {\n    return {\n        type: 'MEAL_FORM/DELETE_INGREDIENT',\n        payload,\n    };\n}\n\nexport function newMeal() {\n    console.log('new meal action');\n    return {\n        type: 'MEAL_FORM/NEW',\n        payload: {\n            new: true,\n            show: true,\n            timeString: unixToTimeString(),\n            dateString: unixToDateString(),\n        },\n    };\n}\n\nexport function closeMealForm() {\n    return {\n        type: 'MEAL_FORM/CLOSE',\n    };\n}\n","import * as API from 'components/common/utils/api.js';\n\n\nfunction loadingActivity(){\n    return {\n        type: 'ACTIVITY/LOADING'\n    }\n}\n\nexport  function setActivity(filter) {\n    return async (dispatch, getState) => {\n        try {\n            dispatch(loadingActivity())\n            let filter = getState().view.activity.filter\n            let response = await API.get(`activity/${filter}`);\n            let data = Object.fromEntries(response.map((entry)=>{ //CONVERTS ARRAY TO OBJECT KEYED BY _ID\n                let { _id } = entry\n                return [_id, entry]\n            }))\n            dispatch({type: 'ACTIVITY/SET_DATA', payload: {data, loading: false}})\n        } catch (error) {\n            console.log(error)\n        }\n    };\n}","import store from 'components/common/state/Store';\nimport {\n    unixToDateString,\n    unixToTimeString,\n} from 'components/common/utils/DateHandler';\n\nexport function editHealthCheck(id) {\n    let currentEntry = store.getState().activity.data[id];\n    return {\n        type: 'HEALTH_CHECK_FORM/EDIT',\n\n        payload: {\n            edit: true,\n            show: true,\n            ...currentEntry,\n            timeString: unixToTimeString(currentEntry.time),\n            dateString: unixToDateString(currentEntry.time),\n        },\n    };\n}\n\nexport function formChange(payload) {\n    return {\n        type: 'HEALTH_CHECK_FORM/CHANGE',\n        payload,\n    };\n}\n\nexport function deleteSymptom(payload) {\n    return {\n        type: 'HEALTH_CHECK_FORM/DELETE_SYMPTOM',\n        payload,\n    };\n}\n\nexport function newHealthCheck() {\n    console.log('new meal action');\n    return {\n        type: 'HEALTH_CHECK_FORM/NEW',\n        payload: {\n            new: true,\n            show: true,\n            timeString: unixToTimeString(),\n            dateString: unixToDateString(),\n        },\n    };\n}\nexport function closeHealthCheckForm() {\n    return {\n        type: 'HEALTH_CHECK_FORM/CLOSE',\n    };\n}\n","import React from 'react';\nimport * as API from '../common/utils/api.js';\nimport { useDispatch } from 'react-redux';\nimport { editMeal } from 'components/meal_form/state/MealFormActions';\nimport { setActivity } from 'components/activity/state/ActivityActions';\nimport { editHealthCheck } from 'components/health_check_form/state/healthCheckFormActions.js';\n\nexport default function ManageEntry(props) {\n    const dispatch = useDispatch();\n    let { _id, type } = props.entry;\n    let endpoint;\n    if (type === 'meal') endpoint = 'meals';\n    if (type === 'healthCheck') endpoint = 'health-checks';\n\n    async function handleDelete(e) {\n        e.preventDefault();\n        try {\n            await API.deleteByID(`activity/${endpoint}`, _id);\n            dispatch(setActivity());\n        } catch (error) {\n            console.error(error);\n        }\n    }\n\n    function handleEdit(e) {\n        e.preventDefault();\n        if (type === 'meal') dispatch(editMeal(_id));\n        if (type === 'healthCheck') dispatch(editHealthCheck(_id))\n    }\n\n    return (\n        <div>\n            <a onClick={handleDelete} href=\"#\">\n                <i style={{ marginLeft: '10px' }} className=\"fas fa-times\"></i>\n            </a>\n            <a onClick={handleEdit} href=\"#\">\n                <i\n                    style={{ marginLeft: '10px' }}\n                    className=\"fas fa-pencil-alt\"></i>\n            </a>\n        </div>\n    );\n};\n","import React from 'react';\nimport dayjs from 'dayjs';\nimport Container from 'react-bootstrap/Container';\nimport Row from 'react-bootstrap/Row';\nimport Col from 'react-bootstrap/Col';\nimport Pill from '../Pill.jsx';\nimport ManageEntry from './ManageEntry';\nimport './Entry.scss';\n\nexport default function MealEntry(props) {\n    let { entry } = props;\n    let { ingredients, mealType, time } = entry;\n    return (\n        <Container className=\"entry-container\" fluid>\n            <Row>\n                <Col xs=\"auto\" className=\"time-container\">{dayjs.unix(time).format('h:mm A')}</Col> \n                <Col xs={true} className=\"entry-data-container meal-entry-container\">\n                        <Row className=\"entry-heading\">\n                            <Col>\n                                <h5>\n                                    {mealType}\n                                </h5>\n                            </Col>\n                            <Col xs=\"auto\">\n                                <ManageEntry entry={entry} />\n                            </Col>\n                        </Row>\n                        <Row className=\"entry-section\">\n                            <Col xs=\"auto\">\n                                <div className=\"section-title\">Ingredients:</div>\n                            </Col>\n                            <Col xs={true}>\n                                {ingredients.map((ingredient, index) => {\n                                    return <Pill key={index} text={ingredient.name} color=\"red\" />;\n                                })}\n                            </Col>\n                        </Row>\n                </Col>\n            </Row>\n        </Container>\n    );\n}\n","import React from 'react';\nimport Container from 'react-bootstrap/Container';\nimport Row from 'react-bootstrap/Row';\nimport Col from 'react-bootstrap/Col';\nimport Pill from '../Pill.jsx';\nimport './Entry.scss';\nimport ManageEntry from './ManageEntry.jsx';\nimport dayjs from 'dayjs';\n\nexport default function HealthCheckEntry(props) {\n    let { entry } = props;\n    let { symptoms, type, time } = entry;\n    return (\n        <Container className=\"entry-container\" fluid>\n            <Row>\n                <Col xs=\"auto\" className=\"time-container\">\n                    {dayjs.unix(time).format('h:mm A')}\n                </Col>\n                <Col xs={true} className=\"entry-data-container health-check-entry-container\">\n                    <Row className=\"entry-heading\">\n                        <Col>\n                            <h5>❤️ Wellness Check</h5>\n                        </Col>\n                        <Col xs=\"auto\">\n                            <ManageEntry entry={entry} />\n                        </Col>\n                    </Row>\n                    <Row className=\"entry-section\">\n                        <Col xs=\"auto\">\n                            <div className=\"section-title\">Symptoms:</div>\n                        </Col>\n                        <Col xs={true}>\n                            {symptoms.map((symptom, index) => {\n                                let severityEnum = {\n                                    1: 'Mild',\n                                    2: 'Moderate',\n                                    3: 'Severe',\n                                };\n                                const colorEnum = {\n                                    1: 'yellow',\n                                    2: 'orange',\n                                    3: 'red',\n                                };\n                                return (\n                                    <Pill key={index} text={symptom.description} color=\"green\" />\n                                );\n                            })}\n                        </Col>\n                    </Row>\n                </Col>\n            </Row>\n        </Container>\n    );\n}\n","import React from 'react';\nimport MealEntry from './MealEntry.jsx';\nimport HealthCheckEntry from './HealthCheckEntry.jsx';\nimport Container from 'react-bootstrap/Container';\nimport Row from 'react-bootstrap/Row';\nimport Col from 'react-bootstrap/Col';\nimport './DateBlock.scss';\n\nexport default function DateBlock(props) {\n    let { entries, index } = props;\n    return (\n        <div>\n            {index > 0 && <hr />}\n            <Container fluid className=\"date-block-container\">\n                <Row>\n                    <Col xs={1} className=\"date-col\">\n                        <div className=\"date-container\">\n                            <div>{entries[0].date}</div>\n                        </div>\n                    </Col>\n                    <Col>\n                        {entries.map((entry) => {\n                            if (entry.type === 'meal')\n                                return <MealEntry key={entry._id} entry={entry} />;\n                            if (entry.type === 'healthCheck')\n                                return <HealthCheckEntry key={entry._id} entry={entry} />;\n                            return null\n                        })}\n                    </Col>\n                </Row>\n            </Container>\n        </div>\n    );\n}\n","import React from 'react';\nimport './AddButtonsContainer.scss';\nimport { useDispatch } from 'react-redux';\nimport { newMeal } from 'components/meal_form/state/MealFormActions';\nimport Button from 'react-bootstrap/Button';\nimport { newHealthCheck } from 'components/health_check_form/state/healthCheckFormActions';\n\nexport default function AddButtonsContainer(props) {\n    const dispatch = useDispatch();\n    return (\n        <div className=\"add-buttons-container\">\n            <Button\n                onClick={() => {\n                    dispatch(newMeal());\n                }}\n                className=\"new-meal\"\n                variant=\"default\">\n                <i className=\"fas fa-plus\"></i> Add Meal\n            </Button>\n            <Button\n                onClick={() => {\n                    dispatch(newHealthCheck());\n                }}\n                className=\"new-meal\"\n                variant=\"default\">\n                <i className=\"fas fa-plus\"></i> Add Wellness Check\n            </Button>\n        </div>\n    );\n}\n","import React, { useState } from 'react';\nimport _ from 'lodash';\nimport { AsyncTypeahead } from 'react-bootstrap-typeahead';\nimport 'react-bootstrap-typeahead/css/Typeahead.css';\nimport * as API from './utils/api.js';\n\nexport default function InputAutoComplete(props) {\n    let {\n        defaultInputValue,\n        submit,\n        placeholder,\n        apiEndpoint,\n        allowNewItems,\n        suggestions,\n        clearOnSubmit\n    } = props;\n    \n    let [isLoading, setIsLoading] = useState(false);\n    let [options, setOptions] = useState([]);\n    let [value, setValue] = useState([]);\n\n    async function handleSearch(query) {\n        if (suggestions) { //if suggestions prop is supplied use supplied array\n            setOptions(suggestions);\n        } else { //if no suggestions prop is supplied, query api for suggestions\n            setIsLoading(true);\n            query = _.startCase(_.lowerCase(query));\n            let url = `suggestions/${apiEndpoint}/${query}`;\n            setOptions(await API.get(url))\n            setIsLoading(false);\n        }\n    }\n\n    function submitHandler(value) {\n        if (value.length <= 0) return;\n        let outputValue = value[0];\n        let newItem = false;\n        if (typeof outputValue === 'object') {\n            outputValue = outputValue.label;\n            newItem = true;\n        }\n        outputValue = _.startCase(_.lowerCase(outputValue));\n        if (allowNewItems && newItem) {\n            postValue(outputValue);\n        }\n        submit(outputValue);\n        if(clearOnSubmit) setValue(['']);\n    }\n\n    async function postValue(value) {\n        await API.post(apiEndpoint, { value });\n    }\n\n    return (\n        <AsyncTypeahead\n            selectHintOnEnter={true}\n            id=\"autocomplete-input\"\n            minLength={1}\n            allowNew={allowNewItems}\n            delay={100}\n            newSelectionPrefix=\"Add a new item: \"\n            isLoading={isLoading}\n            options={options}\n            selected={value}\n            placeholder={placeholder}\n            onChange={(value) => {\n                setValue(value);\n                submitHandler(value);\n            }}\n            onSearch={handleSearch}\n            defaultInputValue={defaultInputValue ? defaultInputValue : ''}\n        />\n    );\n}\n","import React from 'react';\nimport './IngredientPill.scss';\n\nexport default function IngredientPill(props) {\n    let { onClick } = props;\n\n    return (\n        <div className=\"ingredient-pill\">\n            <div\n                onClick={onClick}\n                className=\"pill-primary\">\n                {props.primaryText}\n            </div>\n        </div>\n    );\n}\n","import React from 'react';\nimport { useState } from 'react';\nimport Modal from 'react-bootstrap/Modal';\nimport Button from 'react-bootstrap/Button';\nimport Form from 'react-bootstrap/Form';\nimport Row from 'react-bootstrap/Row'\nimport Col from 'react-bootstrap/Col';\nimport { useDispatch, useSelector } from 'react-redux';\nimport _ from 'lodash';\n\nimport InputAutoComplete from 'components/common/InputAutoComplete';\nimport {\n    closeMealForm,\n    deleteIngredient,\n    formChange,\n} from './state/MealFormActions';\nimport Pill from 'components/IngredientPill';\nimport * as API from 'components/common/utils/api';\nimport { stringToUnixTime } from 'components/common/utils/DateHandler';\nimport './MealForm.scss';\nimport { setActivity } from 'components/activity/state/ActivityActions';\n\nexport default function MealForm(props) {\n    let [processing, setProcessing] = useState(false);\n    let state = useSelector((state) => state.mealForm);\n    const dispatch = useDispatch();\n\n    async function handleSubmit() {\n        try {\n            setProcessing(true);\n            let unixTime = stringToUnixTime(state.dateString, state.timeString);\n            let newMeal = {\n                ingredients: state.ingredients.map(\n                    (ingredient) => ingredient.name\n                ),\n                type: state.mealType,\n                time: unixTime,\n            };\n            if (state.new) await API.post('activity/meals', newMeal);\n            if (state.edit)\n                await API.put('activity/meals/' + state._id, newMeal);\n            setProcessing(false);\n            handleClose();\n            dispatch(setActivity());\n        } catch (error) {\n            console.log(error);\n            setProcessing(false);\n            handleClose();\n        }\n    }\n    async function handleClose() {\n        dispatch(closeMealForm());\n    }\n\n    function addIngredient(newIngredient) {\n        newIngredient = _.startCase(_.lowerCase(newIngredient));\n        if (state.ingredients.map(ingredient => ingredient.name).includes(newIngredient)) return;\n        dispatch(\n            formChange({\n                ingredients: [...state.ingredients, { name: newIngredient }],\n            })\n        );\n    }\n\n    return (\n        <Modal show={state.show} onHide={handleClose}>\n            <Modal.Header closeButton>\n                {state.edit && <Modal.Title>Edit Meal</Modal.Title>}\n                {state.new && <Modal.Title>Post New Meal</Modal.Title>}\n            </Modal.Header>\n            <Modal.Body>\n                <div className=\"meal-form-container\">\n                    <Row>\n                        <Col xs={12}>\n                            <InputAutoComplete\n                                submit={(value) => {\n                                    dispatch(formChange({ mealType: value }));\n                                }}\n                                suggestions={[\n                                    'Breakfast',\n                                    'Lunch',\n                                    'Dinner',\n                                    'Snack',\n                                    'Dessert',\n                                    'Drink',\n                                ]}\n                                defaultInputValue={state.mealType}\n                                placeholder=\"Meal Type (ie: Breakfast, Lunch, Dinner)\"\n                            />\n                        </Col>\n                    </Row>\n                    <Row>\n                        <Col xs={6}>\n                            <Form.Control\n                                type=\"date\"\n                                value={state.dateString}\n                                onChange={(e) => {\n                                    dispatch(\n                                        formChange({\n                                            dateString: e.target.value,\n                                        })\n                                    );\n                                }}\n                            />\n                        </Col>\n                        <Col xs={6}>\n                            <Form.Control\n                                type=\"time\"\n                                value={state.timeString}\n                                onChange={(e) => {\n                                    dispatch(\n                                        formChange({\n                                            timeString: e.target.value,\n                                        })\n                                    );\n                                }}\n                            />\n                        </Col>\n                    </Row>\n                    <Row>\n                        <Col>\n                            <InputAutoComplete\n                                submit={addIngredient}\n                                apiEndpoint=\"ingredients\"\n                                clearOnSubmit\n                                placeholder=\"Add Ingredients One at a Time\"\n                            />\n                        </Col>\n                    </Row>\n                    <div className=\"ingredient-list\">\n                        {state.ingredients.map((ingredient) => {\n                            return (\n                                <Pill\n                                    onClick={()=>{\n                                        dispatch(deleteIngredient(ingredient))\n                                    }}\n                                    key={ingredient.id}\n                                    primaryText={ingredient.name}\n                                />\n                            );\n                        })}\n                    </div>\n                </div>\n            </Modal.Body>\n            <Modal.Footer>\n                <Button variant=\"secondary\" onClick={handleClose}>\n                    Cancel\n                </Button>\n                {state.new && (\n                    <Button\n                        disabled={processing}\n                        variant=\"success\"\n                        onClick={handleSubmit}>\n                        {processing ? 'Posting' : 'Post Meal'}\n                    </Button>\n                )}\n                {state.edit && (\n                    <Button\n                        disabled={processing}\n                        variant=\"success\"\n                        onClick={handleSubmit}>\n                        {processing ? 'Saving' : 'Save Changes'}\n                    </Button>\n                )}\n            </Modal.Footer>\n        </Modal>\n    );\n}\n","import dayjs from 'dayjs';\nimport isYesterday from 'dayjs/plugin/isYesterday';\nimport isToday from 'dayjs/plugin/isToday';\nimport customParseFormat from 'dayjs/plugin/customParseFormat';\ndayjs().format();\ndayjs.extend(isYesterday);\ndayjs.extend(isToday);\ndayjs.extend(customParseFormat);\n\nfunction toDate(time) {\n    let date = dayjs.unix(time);\n    if (date.isYesterday()) return 'Yesterday';\n    if (date.isToday()) return 'Today'\n    let oneWeekAgo = dayjs().subtract(1, 'week')\n    if (date.isAfter(oneWeekAgo)){\n        return date.format('dddd')\n    }\n    return date.format('MMM DD');\n}\n\nfunction toSortedArray(dataObject){\n    let dataArray = Object.entries(dataObject).map(([key, val])=>{\n        return {...val} //IMPORTANT, CREATES SHALLOW COPY TO PREVENT MUTATING STATE\n    })\n    return dataArray.sort((a, b)=>{\n        return b.time - a.time\n    })\n}\n\nexport function create(dataObject) { \n    let dataArray = toSortedArray(dataObject)\n    return dataArray.reduce((acc, currentEntry) => {\n        currentEntry.date = toDate(currentEntry.time);\n        let lastSubArray = acc[acc.length - 1];\n        if (!lastSubArray) return [[currentEntry]];\n        let lastEntry = lastSubArray[lastSubArray.length - 1];\n        if (lastEntry.date === currentEntry.date) {\n            acc[acc.length - 1].unshift(currentEntry);\n            return acc;\n        }\n        acc.push([currentEntry]);\n        return acc;\n    }, []);\n}\n","import React, { useState } from 'react';\nimport Form from 'react-bootstrap/Form';\nimport Row from 'react-bootstrap/Row'\nimport Col from 'react-bootstrap/Col';\nimport ButtonGroup from 'react-bootstrap/ButtonGroup';\nimport Button from 'react-bootstrap/Button';\nimport Modal from 'react-bootstrap/Modal';\nimport _ from 'lodash';\nimport { useDispatch, useSelector } from 'react-redux';\nimport {\n    closeHealthCheckForm,\n    formChange,\n    deleteSymptom\n} from './state/healthCheckFormActions';\nimport InputAutoComplete from 'components/common/InputAutoComplete';\nimport Pill from 'components/IngredientPill';\nimport * as API from 'components/common/utils/api';\nimport { stringToUnixTime } from 'components/common/utils/DateHandler';\nimport './HealthCheckForm.scss';\nimport { setActivity } from 'components/activity/state/ActivityActions';\n\nexport default function HealthCheckForm() {\n    let [processing, setProcessing] = useState(false);\n    let state = useSelector((state) => state.healthCheckForm);\n    let dispatch = useDispatch();\n\n    function handleClose() {\n        dispatch(closeHealthCheckForm());\n    }\n    function handleMoodSelect(val) {\n        dispatch(\n            formChange({\n                mood: val,\n            })\n        );\n    }\n    function addSymptom(newSymptom) {\n        newSymptom = _.startCase(_.lowerCase(newSymptom));\n        console.log(state.symptoms);\n        if (\n            state.symptoms\n                .map((symptom) => symptom.description)\n                .includes(newSymptom)\n        )\n            return;\n        dispatch(\n            formChange({\n                symptoms: [...state.symptoms, { description: newSymptom }],\n            })\n        );\n    }\n    async function handleSubmit() {\n        try {\n            setProcessing(true);\n            let unixTime = stringToUnixTime(state.dateString, state.timeString);\n            let newHealthCheck = {\n                symptoms: state.symptoms.map((symptom) => symptom.description),\n                mood: state.mood,\n                time: unixTime,\n            };\n            if (state.new)\n                await API.post('activity/health-checks', newHealthCheck);\n            if (state.edit)\n                await API.put(\n                    'activity/health-checks/' + state._id,\n                    newHealthCheck\n                );\n            setProcessing(false);\n            handleClose();\n            dispatch(setActivity());\n        } catch (error) {\n            console.log(error);\n            setProcessing(false);\n            handleClose();\n        }\n    }\n\n    return (\n        <Modal show={state.show} onHide={handleClose}>\n            <Modal.Header closeButton>\n                {state.edit && <Modal.Title>Edit Wellness Check</Modal.Title>}\n                {state.new && (\n                    <Modal.Title>Post New Wellness Check</Modal.Title>\n                )}\n            </Modal.Header>\n            <Modal.Body>\n                <div className=\"health-check-form-container\">\n                    <Row>\n                        <Col xs={6}>\n                            <Form.Control\n                                type=\"date\"\n                                name=\"date\"\n                                value={state.dateString}\n                                onChange={(e) => {\n                                    dispatch(\n                                        formChange({\n                                            dateString: e.target.value,\n                                        })\n                                    );\n                                }}\n                            />\n                        </Col>\n                        <Col xs={6}>\n                            <Form.Control\n                                type=\"time\"\n                                name=\"time\"\n                                value={state.timeString}\n                                onChange={(e) => {\n                                    dispatch(\n                                        formChange({\n                                            timeString: e.target.value,\n                                        })\n                                    );\n                                }}\n                            />\n                        </Col>\n                    </Row>\n                    <Row>\n                        <Col xs={12}>\n                            <ButtonGroup style={{ display: 'flex' }}>\n                                <Button\n                                    onClick={() => handleMoodSelect(1)}\n                                    className=\"mood-button\"\n                                    variant={\n                                        state.mood === 1 ? 'secondary' : 'light'\n                                    }>\n                                    Grumpy\n                                </Button>\n                                <Button\n                                    onClick={() => handleMoodSelect(2)}\n                                    className=\"mood-button\"\n                                    variant={\n                                        state.mood === 2 ? 'secondary' : 'light'\n                                    }>\n                                    Neutral\n                                </Button>\n                                <Button\n                                    onClick={() => handleMoodSelect(3)}\n                                    className=\"mood-button\"\n                                    variant={\n                                        state.mood === 3 ? 'secondary' : 'light'\n                                    }>\n                                    Upbeat\n                                </Button>\n                            </ButtonGroup>\n                        </Col>\n                    </Row>\n                    <Row>\n                        <Col>\n                            <InputAutoComplete\n                                submit={addSymptom}\n                                clearOnSubmit\n                                placeholder=\"Add Symptoms One at a Time\"\n                                apiEndpoint=\"symptoms\"\n                            />\n                        </Col>\n                    </Row>\n                    <div className=\"symptom-list\">\n                        {state.symptoms.map((symptom, index) => {\n                            return (\n                                <Pill\n                                    onClick={() => {\n                                        dispatch(deleteSymptom(symptom));\n                                    }}\n                                    index={index}\n                                    key={index}\n                                    primaryText={symptom.description}\n                                />\n                            );\n                        })}\n                    </div>\n                </div>\n            </Modal.Body>\n            <Modal.Footer>\n                <Button variant=\"secondary\" onClick={handleClose}>\n                    Cancel\n                </Button>\n                {state.new && (\n                    <Button\n                        disabled={processing}\n                        variant=\"success\"\n                        onClick={handleSubmit}>\n                        {processing ? 'Posting' : 'Post Health Check'}\n                    </Button>\n                )}\n                {state.edit && (\n                    <Button\n                        disabled={processing}\n                        variant=\"success\"\n                        onClick={handleSubmit}>\n                        {processing ? 'Saving' : 'Save Changes'}\n                    </Button>\n                )}\n            </Modal.Footer>\n        </Modal>\n    );\n}\n","import React, { useEffect } from 'react';\nimport './Activity.scss';\nimport DateBlock from './DateBlock.jsx';\nimport AddButtonsContainer from 'components/activity/AddButtonsContainer';\nimport MealForm from 'components/meal_form/MealForm';\nimport * as FeedArray from './utils/feedArray';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { setActivity } from 'components/activity/state/ActivityActions';\nimport HealthCheckForm from 'components/health_check_form/HealthCheckForm';\n\nexport default function Activity(props) {\n    const dispatch = useDispatch();\n    let state = useSelector((state) => state);\n\n    useEffect(() => {\n        dispatch(setActivity());\n    }, [state.view]);\n\n    let activityFeed = FeedArray.create(state.activity.data);\n    \n    return (\n        <div className=\"activity-container\">\n            <div>\n                <AddButtonsContainer />\n                <MealForm />\n                <HealthCheckForm />\n                <hr />\n                {activityFeed.map((dateBlock, index) => {\n                    return <DateBlock key={index} index={index} entries={dateBlock} />;\n                })}\n            </div>\n        </div>\n    );\n}\n","import React from 'react';\nimport Sidebar from './Sidebar';\nimport Activity from './activity/Activity'\nimport { useSelector } from 'react-redux';\n\nexport default function Dashboard(props){\n    let state = useSelector(state => state.view)\n\n    return (\n        <div style={{position: 'relative'}}>\n            <Sidebar />\n            {(state.activity.active) && <Activity />}\n\n        </div>  \n    )\n}","import React, { useEffect } from 'react';\nimport Header from 'components/header/Header';\nimport Dashboard from './Dashboard';\nimport {useSelector, useDispatch} from 'react-redux'\nimport {attemptLogIn } from './common/state/UserStateActions.js'\n\nfunction App() {\n    let userState = useSelector(state => state.UserState)\n    const dispatch = useDispatch()\n\n\n    useEffect(() => dispatch(attemptLogIn()), []);\n\n    return (\n        <div>\n            <Header />\n\n            {userState.isLoggedIn && (\n                <Dashboard/>\n            )}\n        </div>\n    );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './components/App';\nimport './styles.scss';\nimport { Provider } from 'react-redux';\nimport store from './components/common/state/Store.js'\n\n\nReactDOM.render(\n    <Provider store={store}>\n        <App />\n    </Provider>,\n    document.getElementById('root')\n);\n"],"sourceRoot":""}