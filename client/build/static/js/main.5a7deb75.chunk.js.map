{"version":3,"sources":["components/common/utils/accessToken.js","components/common/utils/userState.js","components/common/state/UserStateReducer.js","components/activity/state/ActivityReducer.js","components/meal_form/state/MealFormReducer.js","components/health_check_form/state/healthCheckFormReducer.js","components/login_form/state/loginFormReducer.js","components/user_menu/state/UserMenuReducer.js","components/common/state/ViewReducer.js","components/common/utils/formValidation.js","components/register_form/state/registerFormReducer.js","components/common/state/RootReducer.js","components/common/state/Store.js","components/common/utils/api.js","components/common/state/UserStateActions.js","components/login_form/state/loginFormActions.js","components/register_form/state/registerFormActions.js","components/register_form/state/RegisterInput.jsx","components/register_form/registerForm.jsx","components/login_form/LoginForm.jsx","components/user_menu/UserMenu.jsx","components/user_menu/state/UserMenuActions.js","components/header/Header.jsx","components/activity/state/ActivityActions.js","components/common/state/ViewActions.js","components/Sidebar.jsx","components/Pill.jsx","components/common/utils/DateHandler.js","components/meal_form/state/MealFormActions.js","components/health_check_form/state/healthCheckFormActions.js","components/activity/ManageEntry.jsx","components/activity/MealEntry.jsx","components/activity/HealthCheckEntry.jsx","components/activity/DateBlock.jsx","components/activity/AddButtonsContainer.jsx","components/common/InputAutoComplete.jsx","components/IngredientPill.jsx","components/meal_form/MealForm.jsx","components/activity/utils/feedArray.js","components/health_check_form/HealthCheckForm.jsx","components/activity/Activity.jsx","components/Dashboard.jsx","components/App.jsx","index.js"],"names":["AccessToken","value","jwt_decode","exp","username","firstName","lastName","this","Math","ceil","Date","now","getCurrSeconds","refresh","a","fetch","response","status","json","error","Error","token","UserState","expired","accessToken","isLoggedIn","initialState","data","loading","show","ingredients","time","mealType","_id","new","edit","timeString","dateString","symptoms","mood","password","invalidPassword","invalidUsername","activity","active","filter","valid","test","name","intitalInputState","touched","email","passwordVerify","rootReducer","combineReducers","state","action","type","payload","mealForm","ingredient","healthCheckForm","symptom","loginForm","userMenu","console","log","view","registerForm","outputState","Object","keys","forEach","key","hasOwnProperty","devTools","window","__REDUX_DEVTOOLS_EXTENSION__","middleWare","compose","applyMiddleware","thunk","store","createStore","dispatch","getState","getHeaders","Authorization","get","route","attemptLogIn","method","headers","post","body","JSON","stringify","put","deleteByID","setUserState","setLoginForm","setRegisterForm","validateRegisterForm","RegisterInput","props","validationCallback","placeholder","capitalize","validated","handleBlur","onBlur","handleChange","onChange","Form","Group","Control","isInvalid","isValid","e","target","_","startCase","lowerCase","Feedback","RegisterForm","useState","processing","useDispatch","useSelector","handleSubmit","preventDefault","registerPayload","Modal","onHide","onSubmit","noValidate","Header","Title","Body","className","Row","Col","xs","validate","Footer","Button","variant","onClick","disabled","Login","md","errorMessage","message","UserMenu","loggingOut","setLoggingOut","style","marginLeft","Offcanvas","placement","closeButton","userState","Container","fluid","sm","color","setActivity","API","fromEntries","map","entry","ViewActivity","Sidebar","setCurrentView","href","Pill","primaryColor","primaryText","secondaryText","secondaryColor","stringToUnixTime","date","dayjs","unix","unixToDateString","unixTime","format","unixToTimeString","formChange","ManageEntry","endpoint","currentEntry","editMeal","id","editHealthCheck","extend","customParseFormat","MealEntry","index","description","1","2","3","severity","DateBlock","entries","HealthCheckEntry","AddButtonsContainer","InputAutoComplete","defaultInputValue","submit","apiEndpoint","allowNewItems","suggestions","clearOnSubmit","isLoading","setIsLoading","options","setOptions","setValue","query","url","submitHandler","length","outputValue","newItem","label","postValue","selectHintOnEnter","minLength","allowNew","delay","newSelectionPrefix","selected","onSearch","IngredientPill","MealForm","setProcessing","newMeal","handleClose","newIngredient","includes","create","dataObject","val","sort","b","toSortedArray","reduce","acc","isYesterday","isToday","oneWeekAgo","subtract","isAfter","toDate","lastSubArray","unshift","push","HealthCheckForm","handleMoodSelect","newHealthCheck","ButtonGroup","display","newSymptom","Activity","useEffect","activityFeed","FeedArray","dateBlock","Dashboard","position","App","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.5a7deb75.chunk.js","sourcesContent":["import jwt_decode from 'jwt-decode';\n\nexport class AccessToken {\n    constructor(value){\n        let {exp, username, firstName, lastName} = jwt_decode(value)\n        this.value = value;\n        this.exp = exp\n        this.username = username\n        this.firstName = firstName\n        this.lastName = lastName\n    }\n    getCurrSeconds() {\n        return Math.ceil(Date.now() / 1000);\n    }\n    expired(){\n        if(this.exp < this.getCurrSeconds() + 10){\n            return true;\n        }\n        return false\n    }\n}\n\nexport async function refresh() {\n    let response = await fetch('/access');\n    if (response.status !== 200) {\n        let error = await response.json();\n        throw new Error(error);\n    }\n    let token = await response.json();\n    return new AccessToken(token)\n}\n\nexport function decode(token) {\n    let { username, firstName, lastName } = jwt_decode(token);\n    console.log(firstName)\n    return {\n        username,\n        firstName,\n        lastName,\n        accessToken: token,\n        isLoggedIn: true,\n    };\n}\n","export default class UserState {\n    constructor(token) {\n        if (token && !token.expired()) {\n            this.accessToken = token;\n            let { username, firstName, lastName } = token;\n            this.username = username;\n            this.firstName = firstName;\n            this.lastName = lastName;\n            this.isLoggedIn = true\n        } else {\n            this.accessToken = null\n            this.username = '';\n            this.firstName = '';\n            this.lastName = '';\n            this.isLoggedIn = false\n        }\n    }\n}\n","import UserState from 'components/common/utils/userState'\n\nconst initialState = new UserState()\n\nexport default function UserStateReducer(state = initialState, action){\n    switch (action.type){\n        case 'USERSTATE/SET':\n            return action.payload\n        default: return state\n    }\n}","const initialState = { data: {}, loading: false };\n\nexport default function ActivityReducer(state = initialState, action) {\n    switch (action.type) {\n        case 'ACTIVITY/SET_DATA':\n            return { ...action.payload }\n        case 'ACTIVITY/LOADING':\n            return { ...state, loading: true}\n        default:\n            return state;\n    }\n}\n","const initialState = {\n    show: false,\n    ingredients: [],\n    time: '',\n    mealType: '',\n    _id: '',\n    new: false,\n    edit: false,\n    timeString: '',\n    dateString: '',\n};\n\nexport default function MealFormReducer(state = initialState, action) {\n    let { payload } = action;\n    switch (action.type) {\n        case 'MEAL_FORM/EDIT':\n            return { ...initialState, ...payload };\n        case 'MEAL_FORM/NEW':\n            return { ...initialState, ...payload };\n        case 'MEAL_FORM/CHANGE':\n            return { ...state, ...payload };\n        case 'MEAL_FORM/CLOSE':\n            return { ...initialState };\n        case 'MEAL_FORM/DELETE_INGREDIENT':\n            let ingredients = state.ingredients.filter(\n                (ingredient) => ingredient !== payload\n            );\n            return {\n                ...state,\n                ingredients,\n            };\n        default:\n            return state;\n    }\n}\n","const initialState = {\n    show: false,\n    symptoms: [],\n    time: '',\n    mood: null,\n    _id: '',\n    new: false,\n    edit: false,\n    dateString: '',\n    timeString: '',\n};\n\nexport default function HealtCheckFormReducer(state = initialState, action) {\n    let { payload } = action;\n    switch (action.type) {\n        case 'HEALTH_CHECK_FORM/EDIT':\n            return { ...initialState, ...payload };\n        case 'HEALTH_CHECK_FORM/NEW':\n            return { ...initialState, ...payload };\n        case 'HEALTH_CHECK_FORM/DELETE_SYMPTOM':\n            let symptoms = state.symptoms.filter(\n                (symptom) => symptom !== payload\n            );\n            return { ...state, symptoms };\n        case 'HEALTH_CHECK_FORM/CHANGE':\n            return { ...state, ...payload };\n        case 'HEALTH_CHECK_FORM/CLOSE':\n            return { ...initialState };\n        default:\n            return state;\n    }\n}\n","const initialState = {\n    username: '',\n    password: '',\n    show: false,\n    invalidPassword: false,\n    invalidUsername: false,\n};\n\nexport default function LoginFormReducer(state = initialState, action) {\n    let payload = action.payload;\n    switch (action.type) {\n        case 'LOGIN_FORM/SET':\n            return { ...state, ...payload };\n        case 'LOGIN_FORM/SHOW':\n            return { ...state, show: true };\n        case 'LOGIN_FORM/RESET':\n            return { ...initialState };\n        default:\n            return state;\n    }\n}\n","const initialState = {\n    show: false\n};\n\nexport default function UserOptionsReducer(state = initialState, action) {\n    let payload = action.payload;\n    switch (action.type) {\n        case 'USER_MENU/SHOW':\n            console.log('showing')\n            return {...state, show: true};\n        case 'USER_MENU/HIDE':\n            console.log('hiding')\n            return {...state, show: false};\n        default:\n            return state;\n    }\n}\n","const initialState = {\n    activity: {\n        active: true,\n        filter: 'all'\n    }\n};\n\n\nexport default function ViewReducer(state = initialState, action) {\n    let payload = action.payload\n    switch (action.type) {\n        case 'VIEW/ACTIVITY':\n            return { ...initialState, ...payload };\n        default:\n            return state;\n    }\n}\n","import {validate as validateEmail } from 'email-validator'\n\nexport function password(value){\n    let valid = /^\\w{1,}$/i.test(value)\n    let error = valid ? '' : 'Invalid Password'\n    return {valid, error}\n}\n\nexport function email(value){\n\n    let valid = validateEmail(value)\n    let error = valid ? '' : 'Invalid Email Address'\n    return {valid, error}\n\n}\n\nexport function name(value){\n    let valid = /^\\w{1,}/i.test(value)\n    let error = valid ? '' : 'Invalid Name'\n    return {valid, error}\n}","import { Password } from 'components/common/utils/formValidation';\nconst intitalInputState = { value: '', valid: false, touched: false, error: 'Required Field' };\nconst initialState = {\n    show: false,\n    firstName: { ...intitalInputState },\n    lastName: { ...intitalInputState },\n    email: { ...intitalInputState, valid: true },\n    username: { ...intitalInputState },\n    password: { ...intitalInputState },\n    passwordVerify: { ...intitalInputState },\n};\n\nexport default function RegisterFormReducer(state = initialState, action) {\n    let payload = action.payload;\n    switch (action.type) {\n        case 'REGISTER_FORM/SHOW':\n            return { ...state, show: true };\n        case 'REGISTER_FORM/HIDE':\n            return { ...state, show: false };\n        case 'REGISTER_FORM/SET':\n            return { ...state, ...payload };\n        case 'REGISTER_FORM/VALIDATE':\n            return { ...state, ...payload };\n        case 'REGISTER_FORM/TOUCH_ALL':\n            let outputState = {...state}\n            let response = Object.keys(state).forEach((key)=>{\n                if(outputState[key].hasOwnProperty('touched')){\n                    outputState[key].touched = true;\n                }\n            })\n            return outputState\n        default:\n            return { ...state };\n    }\n}\n","import {combineReducers} from 'redux'\nimport UserStateReducer from 'components/common/state/UserStateReducer'\nimport ActivityReducer from 'components/activity/state/ActivityReducer.js'\nimport MealFormReducer from 'components/meal_form/state/MealFormReducer.js'\nimport HealthCheckFormReducer from 'components/health_check_form/state/healthCheckFormReducer'\nimport LoginFormReducer from 'components/login_form/state/loginFormReducer'\nimport UserMenuReducer from 'components/user_menu/state/UserMenuReducer'\nimport ViewReducer from './ViewReducer'\nimport RegisterFormReducer from 'components/register_form/state/registerFormReducer'\n\nconst rootReducer = combineReducers({\n    UserState: UserStateReducer,\n    activity: ActivityReducer,\n    mealForm: MealFormReducer,\n    healthCheckForm: HealthCheckFormReducer,\n    loginForm: LoginFormReducer,\n    userMenu: UserMenuReducer,\n    view: ViewReducer,\n    registerForm: RegisterFormReducer\n})\n\nexport default rootReducer","import { createStore, applyMiddleware, compose } from 'redux';\nimport rootReducer from './RootReducer.js';\nimport thunk from 'redux-thunk';\n\nconst devTools =\n    window.__REDUX_DEVTOOLS_EXTENSION__ &&\n    window.__REDUX_DEVTOOLS_EXTENSION__();\n\nconst middleWare = compose(applyMiddleware(thunk), devTools);\n\nconst store = createStore(rootReducer, middleWare);\n\nexport default store;\n","import { attemptLogIn } from '../state/UserStateActions.js';\nimport store from '../state/Store.js';\n\nlet dispatch = store.dispatch;\n\nfunction token() {\n    return store.getState().UserState.accessToken;\n}\n\nexport function getHeaders() {\n    return {\n        'Content-Type': 'application/json',\n        Authorization: `Bearer ${token().value}`,\n    };\n}\n\n\nexport async function get(route) {\n    if (token().expired()) await dispatch(attemptLogIn());\n    console.log('api get: ' + route);\n    let response = await fetch(`/api/${route}`, {\n        method: 'GET',\n        headers: getHeaders(),\n    });\n    return await response.json();\n}\n\nexport async function post(route, data) {\n    if (token().expired()) await dispatch(attemptLogIn());\n    console.log('api post: ' + route);\n    let response = await fetch(`/api/${route}`, {\n        method: 'POST',\n        headers: getHeaders(),\n        body: JSON.stringify(data),\n    });\n    return await response.json();\n}\n\nexport async function put(route, data) {\n    if (token().expired()) await dispatch(attemptLogIn());\n    let response = await fetch(`/api/${route}`, {\n        method: 'PUT',\n        headers: getHeaders(),\n        body: JSON.stringify(data),\n    });\n    return await response.json();\n}\n\nexport async function deleteByID(route, _id) {\n    if (token().expired()) await dispatch(attemptLogIn());\n    let response = await fetch(`/api/${route}/${_id}`, {\n        method: 'DELETE',\n        headers: getHeaders(),\n    });\n    return await response.json();\n}\n","import * as accessToken from 'components/common/utils/accessToken.js';\nimport UserState from 'components/common/utils/userState';\nimport { hideUserOptions } from 'components/user_menu/state/UserMenuActions';\nimport { getHeaders } from '../utils/api';\n\nexport function setUserState(payload) {\n    return {\n        type: 'USERSTATE/SET',\n        payload,\n    };\n}\n\nexport function attemptLogIn() {\n    console.log('attempting login');\n    return async (dispatch, getState) => {\n        try {\n            let token = await accessToken.refresh(); //return access token object\n            dispatch(setUserState(new UserState(token)));\n        } catch (error) {\n            console.log('no refresh token, login required');\n            dispatch(setUserState(new UserState()));\n        }\n    };\n}\n\nexport function LogOut() {\n    return async (dispatch, getState) => {\n        const token = () => getState().UserState.accessToken;\n        try {\n            if (token().expired()) await dispatch(attemptLogIn());\n            await fetch('/logout', {\n                headers: getHeaders(),\n            });\n            dispatch(hideUserOptions())\n            dispatch(setUserState(new UserState()));\n        } catch (error) {\n            console.error(error)\n        }\n    };\n}\n","import { AccessToken } from 'components/common/utils/accessToken.js';\nimport { setUserState } from 'components/common/state/UserStateActions.js';\nimport UserState from 'components/common/utils/userState';\n\nexport function showLoginForm(payload) {\n    return {\n        type: 'LOGIN_FORM/SHOW',\n    };\n}\n\nexport function setLoginForm(payload) {\n    return {\n        type: 'LOGIN_FORM/SET',\n        payload,\n    };\n}\nexport function resetLoginForm() {\n    return {\n        type: 'LOGIN_FORM/RESET',\n    };\n}\n\nexport function logIn() {\n    return async (dispatch, getState) => {\n        try {\n            let { username, password } = getState().loginForm;\n            let response = await fetch('/login', {\n                method: 'POST',\n                headers: { 'Content-type': 'application/json' },\n                body: JSON.stringify({ username, password }),\n            });\n            if (response.status !== 200) {\n                let errorMessage = await response.json();\n                throw new Error(errorMessage);\n            }\n            let token = new AccessToken(await response.json());\n            dispatch(setUserState(new UserState(token)));\n            dispatch(resetLoginForm());\n        } catch (error) {\n            console.log(error);\n            if (error.message === 'invalid username') {\n                dispatch(setLoginForm({ invalidPassword: false, invalidUsername: true }));\n            }\n            if (error.message === 'invalid password') {\n                dispatch(setLoginForm({ invalidPassword: true, invalidUsername: false }));\n            }\n        }\n    };\n}\n","export function showRegisterForm(){\n    return {\n        type: 'REGISTER_FORM/SHOW'\n    }\n}\nexport function hideRegisterForm(){\n    return {\n        type: 'REGISTER_FORM/HIDE'\n    }\n}\nexport function setRegisterForm(payload){\n    return {\n        type: 'REGISTER_FORM/SET',\n        payload\n    }\n}\nexport function validateRegisterForm(payload){\n    return {\n        type: 'REGISTER_FORM/VALIDATE',\n        payload\n    }\n}\nexport function touchAllInputs(){\n    return {\n        type: \"REGISTER_FORM/TOUCH_ALL\",\n    }\n}","import React from 'react'\nimport Form from 'react-bootstrap/Form';\nimport _ from 'lodash';\n\n\nexport default function RegisterInput(props){\n    let {name, state, validationCallback, placeholder, capitalize, type, validated } = props\n    let handleBlur = props.onBlur\n    let handleChange = props.onChange\n    return (\n        <Form.Group>\n            <Form.Control\n                name={name}\n                value={state.value}\n                isInvalid={validated && state.touched && !state.valid}\n                isValid={validated && state.touched && state.valid}\n                onBlur={(e) => {\n                    let value = e.target.value\n                    if (value) handleBlur(e, validationCallback);\n                }}\n                onChange={(e) => {\n                    let {name, value} = e.target\n                    if(capitalize) value = _.startCase(_.lowerCase(value))\n                    handleChange({name, value});\n                }}\n                type={type}\n                placeholder={placeholder}\n            />\n            <Form.Control.Feedback type=\"invalid\">{state.error}</Form.Control.Feedback>\n            <Form.Control.Feedback type=\"valid\">{state.error}</Form.Control.Feedback>\n        </Form.Group>\n    );\n}","import { useState } from 'react';\nimport React from 'react';\nimport Modal from 'react-bootstrap/Modal';\nimport Row from 'react-bootstrap/Row';\nimport Col from 'react-bootstrap/Col';\nimport Form from 'react-bootstrap/Form';\nimport { useDispatch, useSelector } from 'react-redux';\nimport {\n    hideRegisterForm,\n    setRegisterForm,\n    touchAllInputs,\n    validateRegisterForm,\n} from './state/registerFormActions';\nimport Button from 'react-bootstrap/Button';\nimport './RegisterForm.scss';\nimport * as validate from 'components/common/utils/formValidation';\nimport RegisterInput from './state/RegisterInput';\nimport { AccessToken } from '../common/utils/accessToken.js';\nimport UserState from 'components/common/utils/userState';\nimport { setUserState } from 'components/common/state/UserStateActions';\n\nexport default function RegisterForm() {\n    let [processing, setProcessing] = useState(false);\n    const dispatch = useDispatch();\n    let state = useSelector((state) => state.registerForm);\n\n    async function handleSubmit(e) {\n        e.preventDefault();\n        dispatch(touchAllInputs());\n        if (!state.password.valid) return;\n        if (!state.passwordVerify.valid) return;\n        if (!state.username.valid) return;\n        if (!state.firstName.valid) return;\n        if (!state.lastName.valid) return;\n        let registerPayload = {\n            username: state.username.value,\n            firstName: state.firstName.value,\n            lastName: state.lastName.value,\n            password: state.password.value\n        };\n        console.log(registerPayload)\n        \n        try {\n            let response = await fetch('/register', {\n                method: 'POST',\n                headers: { 'Content-Type': 'application/json' },\n                body: JSON.stringify(registerPayload),\n            });\n            console.log('success')\n            let token = new AccessToken(await response.json());\n            dispatch(setUserState(new UserState(token)))\n        } catch (error) {\n            console.log(error)\n        }\n    }\n\n    async function handleChange({ name, value }) {\n        dispatch(setRegisterForm({ [name]: { value } }));\n    }\n\n    async function handleBlur(e, validationCallback) {\n        let { name, value } = e.target;\n        let { valid, error } = await validationCallback(value);\n        dispatch(validateRegisterForm({ [name]: { value, valid, touched: true, error } }));\n    }\n\n    return (\n        <Modal show={state.show} onHide={() => dispatch(hideRegisterForm())}>\n            <Form onSubmit={handleSubmit} noValidate>\n                <Modal.Header>\n                    <Modal.Title>Sign Up!</Modal.Title>\n                </Modal.Header>\n                <Modal.Body className=\"register-form-container\">\n                    <h6>Personal info:</h6>\n                    <Row>\n                        <Col xs={6}>\n                            <RegisterInput\n                                state={state.firstName}\n                                name=\"firstName\"\n                                validated\n                                placeholder=\"First Name\"\n                                validationCallback={validate.name}\n                                onChange={handleChange}\n                                onBlur={handleBlur}\n                            />\n                        </Col>\n                        <Col xs={6}>\n                            <RegisterInput\n                                state={state.lastName}\n                                name=\"lastName\"\n                                validated\n                                placeholder=\"Last Name\"\n                                validationCallback={validate.name}\n                                capitalize\n                                onChange={handleChange}\n                                onBlur={handleBlur}\n                            />\n                        </Col>\n                    </Row>\n                    <Row>\n                        <Col xs={12}>\n                            {/* <RegisterInput\n                                state={state.email}\n                                name=\"email\"\n                                placeholder=\"Email\"\n                                validationCallback={(validate.email)}\n                                onChange={handleChange}\n                                onBlur={handleBlur}\n                            /> */}\n                        </Col>\n                    </Row>\n                    <hr />\n                    <h6>Account Info:</h6>\n                    <Row>\n                        <Col xs={12}>\n                            <RegisterInput\n                                state={state.username}\n                                name=\"username\"\n                                validated\n                                placeholder=\"Username\"\n                                validationCallback={async (value) => {\n                                    if (!/^\\w{1,}$/i.test(value))\n                                        return { valid: false, error: 'Invalid Username' };\n                                    let response = await fetch('validation/username/' + value);\n                                    let valid = await response.json();\n                                    let error = valid\n                                        ? 'Username is available'\n                                        : 'Username is not available';\n                                    return { valid, error };\n                                }}\n                                onChange={handleChange}\n                                onBlur={handleBlur}\n                            />\n                        </Col>\n                    </Row>\n                    <Row>\n                        <Col xs={12}>\n                            <RegisterInput\n                                type=\"password\"\n                                state={state.password}\n                                name=\"password\"\n                                validated\n                                placeholder=\"Password\"\n                                validationCallback={validate.password}\n                                onChange={handleChange}\n                                onBlur={handleBlur}\n                            />\n                        </Col>\n                    </Row>\n                    <Row>\n                        <Col xs={12}>\n                            <RegisterInput\n                                type=\"password\"\n                                state={state.passwordVerify}\n                                name=\"passwordVerify\"\n                                validated\n                                placeholder=\"Verify Password\"\n                                validationCallback={(value) => {\n                                    let valid = state.password.value === value;\n                                    let error = valid ? '' : 'Passwords do not match';\n                                    return { valid, error };\n                                }}\n                                onChange={handleChange}\n                                onBlur={handleBlur}\n                            />\n                        </Col>\n                    </Row>\n                </Modal.Body>\n                <Modal.Footer>\n                    <Button variant=\"secondary\" onClick={() => dispatch(hideRegisterForm())}>\n                        Cancel\n                    </Button>\n                    <Button\n                        onClick={handleSubmit}\n                        type=\"submit\"\n                        disabled={processing}\n                        variant=\"success\">\n                        {processing ? 'Creating Account' : 'Create Account'}\n                    </Button>\n                </Modal.Footer>\n            </Form>\n        </Modal>\n    );\n}\n","import React, { useState } from 'react';\nimport './LoginForm.scss';\nimport Form from 'react-bootstrap/Form';\nimport Row from 'react-bootstrap/Row';\nimport Col from 'react-bootstrap/Col';\nimport Button from 'react-bootstrap/Button';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { setLoginForm, logIn } from './state/loginFormActions';\nimport { showRegisterForm } from 'components/register_form/state/registerFormActions';\nimport RegisterForm from 'components/register_form/registerForm';\n\nexport default function Login() {\n    let state = useSelector((state) => state.loginForm);\n\n    const dispatch = useDispatch();\n\n    return (\n        <div className=\"login-container\">\n            <Form className=\"form\">\n                <div className=\"login\">\n                    <Row className=\"form-row\">\n                        <Col md=\"auto\">\n                            <Form.Control\n                                isInvalid={state.invalidUsername}\n                                name=\"username\"\n                                className=\"username\"\n                                placeholder=\"User Name\"\n                                value={state.username}\n                                onChange={(e) => {\n                                    dispatch(setLoginForm({ username: e.target.value }));\n                                }}\n                            />\n                        </Col>\n                        <Col className=\"filler\" xs={12}></Col>\n                        <Col md=\"auto\">\n                            <Form.Control\n                                isInvalid={state.invalidPassword}\n                                name=\"password\"\n                                className=\"password\"\n                                type=\"password\"\n                                value={state.password}\n                                onChange={(e) => {\n                                    dispatch(setLoginForm({ password: e.target.value }));\n                                }}\n                                placeholder=\"Password\"\n                            />\n                        </Col>\n                        <Col className=\"filler\" xs={12}></Col>\n                        <Col xs={8} md=\"auto\">\n                            <Button\n                                onClick={() => {\n                                    console.log('signing in');\n                                    dispatch(logIn());\n                                }}\n                                className=\"login-button\"\n                                variant=\"light\">\n                                Sign In\n                            </Button>\n                        </Col>\n                        <Col xs={4} md=\"auto\">\n                            <Button\n                                onClick={() => dispatch(showRegisterForm())}\n                                className=\"signup-button\"\n                                variant=\"success\">\n                                Sign Up\n                            </Button>\n                            <RegisterForm />\n                        </Col>\n                    </Row>\n                </div>\n            </Form>\n        </div>\n    );\n}\n","import React from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { hideUserOptions, showUserOptions } from './state/UserMenuActions';\nimport Button from 'react-bootstrap/Button';\nimport Offcanvas from 'react-bootstrap/Offcanvas';\nimport './UserMenu.scss';\nimport { LogOut } from 'components/common/state/UserStateActions';\nimport { useState } from 'react';\n\nexport default function UserMenu() {\n    let state = useSelector((state) => state.userMenu);\n    let [loggingOut, setLoggingOut] = useState(false);\n    const dispatch = useDispatch();\n    return (\n        <div>\n            <h4>\n                Hello, {useSelector((state) => state.UserState.firstName)}\n                <Button\n                    variant=\"outline-dark\"\n                    style={{ marginLeft: '20px' }}\n                    onClick={() => dispatch(showUserOptions())}>\n                    <i className=\"fas fa-bars\"></i>\n                </Button>\n            </h4>\n            <Offcanvas\n                className=\"user-menu\"\n                show={state.show}\n                onHide={() => dispatch(hideUserOptions())}\n                placement=\"end\">\n                <Offcanvas.Header closeButton>\n                    <Offcanvas.Title>Your Account</Offcanvas.Title>\n                </Offcanvas.Header>\n                <Offcanvas.Body>\n                    <div className=\"options-container\">\n                        <ul>\n                            <li>\n                                <button className=\"link\">Account Settings</button>\n                            </li>\n                            <li>\n                                <button className=\"link\">Help</button>\n                            </li>\n                        </ul>\n                    </div>\n                    <div className=\"logout-button-container\">\n                        <hr />\n                        <Button\n                            disabled={loggingOut}\n                            variant=\"success\"\n                            className=\"logout\"\n                            onClick={ async () => {\n                                setLoggingOut(true)\n                                await dispatch(LogOut());\n                            }}>\n                            {loggingOut ? 'Logging Out' : 'Log Out'}\n                        </Button>\n                    </div>\n                </Offcanvas.Body>\n            </Offcanvas>\n        </div>\n    );\n}\n","export function showUserOptions(){\n    return {\n        type: 'USER_MENU/SHOW'\n    }\n}\nexport function hideUserOptions(){\n    return {\n        type: 'USER_MENU/HIDE'\n    }\n}","import React from 'react';\nimport LoginForm from '../login_form/LoginForm';\nimport './Header.scss';\nimport Container from 'react-bootstrap/Container';\nimport Row from 'react-bootstrap/Row';\nimport Col from 'react-bootstrap/Col';\n//import CurrentUser from 'components/header/CurrentUser'\nimport UserMenu from 'components/user_menu/UserMenu';\nimport { useSelector } from 'react-redux';\n\n\nexport default function Header() {\n    let userState = useSelector(state => state.UserState)\n\n    return (\n        <Container fluid className=\"header-container\">\n            <Row className=\"header\">\n                <Col xs={12} sm=\"auto\" className=\"logo\">\n                    Food <span style={{color: '#888'}}>x</span> Mood\n                </Col>\n                <Col xs={12} md={true} className=\"filler\"></Col>\n                <Col xs={12} md={'auto'} className=\"login\">\n                    {userState.isLoggedIn ? <UserMenu /> : <LoginForm/>}\n                </Col>\n            </Row>\n            \n        </Container>\n    );\n}\n","import * as API from 'components/common/utils/api.js';\n\n\nfunction loadingActivity(){\n    return {\n        type: 'ACTIVITY/LOADING'\n    }\n}\n\nexport  function setActivity(filter) {\n    return async (dispatch, getState) => {\n        try {\n            dispatch(loadingActivity())\n            let filter = getState().view.activity.filter\n            let response = await API.get(`activity/${filter}`);\n            let data = Object.fromEntries(response.map((entry)=>{ //CONVERTS ARRAY TO OBJECT KEYED BY _ID\n                let { _id } = entry\n                return [_id, entry]\n            }))\n            dispatch({type: 'ACTIVITY/SET_DATA', payload: {data, loading: false}})\n        } catch (error) {\n            console.log(error)\n        }\n    };\n}","export function ViewActivity(filter){\n    return {\n        type: 'VIEW/ACTIVITY',\n        payload: {\n            activity: {\n                active: true,\n                filter\n            }\n        }\n    }\n}","import React from 'react';\nimport './Sidebar.scss';\nimport { useDispatch } from 'react-redux';\nimport { setActivity } from 'components/activity/state/ActivityActions';\nimport { ViewActivity } from './common/state/ViewActions';\n\nexport default function Sidebar(props) {\n    let dispatch = useDispatch();\n    let { setCurrentView } = props;\n    return (\n        <div className=\"sidebar-container\">\n            <div className=\"nav-group\">\n                <div className=\"nav-group-title\">\n                    <h5>Your Log</h5>\n                </div>\n                <div\n                    onClick={() => {\n                        dispatch(ViewActivity('all'))\n                    }}\n                    className=\"nav-item\">\n                    <a href=\"#\">All Activity</a>\n                </div>\n                <div\n                    onClick={() => {\n                        dispatch(ViewActivity('meals'))\n                    }}\n                    className=\"nav-item\">\n                    <a href=\"#\">Meals</a>\n                </div>\n                <div\n                    onClick={() => {\n                        dispatch(ViewActivity('health-checks'))\n                    }}\n                    className=\"nav-item\">\n                    <a href=\"#\">Wellness</a>\n                </div>\n                <div className=\"nav-item-catagory\"></div>\n            </div>\n            <div className=\"nav-group\">\n                <div className=\"nav-group-title\">\n                    <h5>Analysis</h5>\n                </div>\n                <div className=\"nav-item\">\n                    <a href=\"#\">Food Items</a>\n                </div>\n                <div className=\"nav-item\">\n                    <a href=\"#\">Symptoms</a>\n                </div>\n                <div className=\"nav-item-catagory\"></div>\n            </div>\n        </div>\n    );\n}\n","import React from 'react'\nimport './Pill.scss'\n\nexport default function Pill(props){\n    return (\n        <div className=\"pill\">\n                        <div className={`pill-primary ${props.primaryColor}`}>{props.primaryText}</div>\n                        {props.secondaryText && <div className={`pill-secondary ${props.secondaryColor}`}>{props.secondaryText}</div>}\n        </div>\n    )\n}","import dayjs from 'dayjs';\nimport customParseFormat from 'dayjs/plugin/customParseFormat';\ndayjs().format();\ndayjs.extend(customParseFormat);\n\nexport function stringToUnixTime(date, time) {\n    return dayjs(`${date} ${time}`, 'YYYY-MM-DD HH:mm').unix();\n}\nexport function unixToDateString(unixTime = dayjs().unix()) {\n    return dayjs.unix(unixTime).format('YYYY-MM-DD');\n}\nexport function unixToTimeString(unixTime = dayjs().unix()) {\n    return dayjs.unix(unixTime).format('HH:mm');\n}\n","import store from 'components/common/state/Store';\nimport { unixToDateString, unixToTimeString } from 'components/common/utils/DateHandler';\n\nexport function editMeal(_id) {\n    let currentEntry = store.getState().activity.data[_id];\n    return {\n        type: 'MEAL_FORM/EDIT',\n\n        payload: {\n            edit: true,\n            show: true,\n            ...currentEntry,\n            timeString: unixToTimeString(currentEntry.time),\n            dateString: unixToDateString(currentEntry.time),\n        },\n    };\n}\n\nexport function formChange(payload) {\n    return {\n        type: 'MEAL_FORM/CHANGE',\n        payload,\n    };\n}\n\nexport function deleteIngredient(payload) {\n    return {\n        type: 'MEAL_FORM/DELETE_INGREDIENT',\n        payload,\n    };\n}\n\nexport function newMeal() {\n    console.log('new meal action');\n    return {\n        type: 'MEAL_FORM/NEW',\n        payload: {\n            new: true,\n            show: true,\n            timeString: unixToTimeString(),\n            dateString: unixToDateString(),\n        },\n    };\n}\n\nexport function closeMealForm() {\n    return {\n        type: 'MEAL_FORM/CLOSE',\n    };\n}\n","import store from 'components/common/state/Store';\nimport {\n    unixToDateString,\n    unixToTimeString,\n} from 'components/common/utils/DateHandler';\n\nexport function editHealthCheck(id) {\n    let currentEntry = store.getState().activity.data[id];\n    return {\n        type: 'HEALTH_CHECK_FORM/EDIT',\n\n        payload: {\n            edit: true,\n            show: true,\n            ...currentEntry,\n            timeString: unixToTimeString(currentEntry.time),\n            dateString: unixToDateString(currentEntry.time),\n        },\n    };\n}\n\nexport function formChange(payload) {\n    return {\n        type: 'HEALTH_CHECK_FORM/CHANGE',\n        payload,\n    };\n}\n\nexport function deleteSymptom(payload) {\n    return {\n        type: 'HEALTH_CHECK_FORM/DELETE_SYMPTOM',\n        payload,\n    };\n}\n\nexport function newHealthCheck() {\n    console.log('new meal action');\n    return {\n        type: 'HEALTH_CHECK_FORM/NEW',\n        payload: {\n            new: true,\n            show: true,\n            timeString: unixToTimeString(),\n            dateString: unixToDateString(),\n        },\n    };\n}\nexport function closeHealthCheckForm() {\n    return {\n        type: 'HEALTH_CHECK_FORM/CLOSE',\n    };\n}\n","import React from 'react';\nimport * as API from '../common/utils/api.js';\nimport { useDispatch } from 'react-redux';\nimport { editMeal } from 'components/meal_form/state/MealFormActions';\nimport { setActivity } from 'components/activity/state/ActivityActions';\nimport { editHealthCheck } from 'components/health_check_form/state/healthCheckFormActions.js';\n\nexport default function ManageEntry(props) {\n    const dispatch = useDispatch();\n    let { _id, type } = props.entry;\n    let endpoint;\n    if (type === 'meal') endpoint = 'meals';\n    if (type === 'healthCheck') endpoint = 'health-checks';\n\n    async function handleDelete(e) {\n        e.preventDefault();\n        try {\n            await API.deleteByID(`activity/${endpoint}`, _id);\n            dispatch(setActivity());\n        } catch (error) {\n            console.error(error);\n        }\n    }\n\n    function handleEdit(e) {\n        e.preventDefault();\n        if (type === 'meal') dispatch(editMeal(_id));\n        if (type === 'healthCheck') dispatch(editHealthCheck(_id))\n    }\n\n    return (\n        <div>\n            <a onClick={handleDelete} href=\"#\">\n                <i style={{ marginLeft: '10px' }} className=\"fas fa-times\"></i>\n            </a>\n            <a onClick={handleEdit} href=\"#\">\n                <i\n                    style={{ marginLeft: '10px' }}\n                    className=\"fas fa-pencil-alt\"></i>\n            </a>\n        </div>\n    );\n};\n","import React from 'react';\nimport dayjs from 'dayjs';\nimport Container from 'react-bootstrap/Container';\nimport Row from 'react-bootstrap/Row';\nimport Col from 'react-bootstrap/Col';\nimport Pill from '../Pill.jsx';\nimport ManageEntry from './ManageEntry'\nimport './Entry.scss';\n\nexport default function MealEntry(props) {\n    let { entry } = props\n    let { ingredients, mealType, time} = entry;\n    return (\n        <Container fluid className=\"entry-container\">\n                    <Row className=\"entry-heading\">\n                        <Col ><h6>{mealType}: {dayjs.unix(time).format('h:mm A')}</h6></Col>\n                        <Col xs=\"auto\">\n                            <ManageEntry entry={entry} />\n                            </Col>\n                    </Row>\n                    <Row className=\"entry-section\">\n                        <Col xs=\"auto\">\n                            <div className=\"section-title\">Ingredients:</div>\n                        </Col>\n                        <Col xs={true}>\n                            {ingredients.map((ingredient, index) => {\n                                return (\n                                    <Pill\n                                        key={index}\n                                        primaryText={ingredient.name}\n                                    />\n                                );\n                            })}\n                        </Col>\n                    </Row>\n        </Container>\n    );\n}\n","import React from 'react';\nimport Container from 'react-bootstrap/Container';\nimport Row from 'react-bootstrap/Row';\nimport Col from 'react-bootstrap/Col';\nimport Pill from '../Pill.jsx';\nimport './Entry.scss';\nimport ManageEntry from './ManageEntry.jsx';\n\nexport default function (props) {\n    let { entry } = props;\n    let { symptoms, mealType, type, time, _id } = entry;\n    return (\n        <Container fluid className=\"entry-container\">\n            <Row className=\"entry-heading\">\n                <Col>\n                    <span className=\"entry-type-secondary\">{type}</span>\n                    <span className=\"entry-date\">{time}</span>\n                </Col>\n                <Col xs=\"auto\">\n                    <ManageEntry entry={entry} />\n                </Col>\n            </Row>\n            <Row className=\"entry-section\">\n                <Col xs=\"auto\">\n                    <div className=\"section-title\">Symptoms:</div>\n                </Col>\n                <Col xs={true}>\n                    {symptoms.map((symptom, index) => {\n                        let severityEnum = {\n                            1: 'Mild',\n                            2: 'Moderate',\n                            3: 'Severe',\n                        };\n                        const colorEnum = {\n                            1: 'yellow',\n                            2: 'orange',\n                            3: 'red',\n                        };\n                        return (\n                            <Pill\n                                key={index}\n                                primaryText={symptom.description}\n                                secondaryText={severityEnum[symptom.severity]}\n                                secondaryColor={colorEnum[symptom.severity]}\n                            />\n                        );\n                    })}\n                </Col>\n            </Row>\n        </Container>\n    );\n}\n","import React from 'react';\nimport MealEntry from './MealEntry.jsx';\nimport HealthCheckEntry from './HealthCheckEntry.jsx';\nimport Container from 'react-bootstrap/Container';\nimport Row from 'react-bootstrap/Row';\nimport Col from 'react-bootstrap/Col';\nimport './DateBlock.scss';\n\nexport default function DateBlock(props) {\n    let { entries, index } = props;\n    return (\n        <div>\n            {index > 0 && <hr />}\n            <Container fluid className=\"date-block-container\">\n                <Row>\n                    <Col xs=\"auto\">\n                        <div className=\"date-container\">\n                            <div>{entries[0].date}</div>\n                        </div>\n                    </Col>\n                    <Col>\n                        {entries.map((entry) => {\n                            if (entry.type === 'meal')\n                                return <MealEntry key={entry._id} entry={entry} />;\n                            if (entry.type === 'healthCheck')\n                                return <HealthCheckEntry key={entry._id} entry={entry} />;\n                            return null\n                        })}\n                    </Col>\n                </Row>\n            </Container>\n        </div>\n    );\n}\n","import React from 'react';\nimport './AddButtonsContainer.scss';\nimport { useDispatch } from 'react-redux';\nimport { newMeal } from 'components/meal_form/state/MealFormActions';\nimport Button from 'react-bootstrap/Button';\nimport { newHealthCheck } from 'components/health_check_form/state/healthCheckFormActions';\n\nexport default function AddButtonsContainer(props) {\n    const dispatch = useDispatch();\n    return (\n        <div className=\"add-buttons-container\">\n            <Button\n                onClick={() => {\n                    dispatch(newMeal());\n                }}\n                className=\"new-meal\"\n                variant=\"success\">\n                <i className=\"fas fa-plus\"></i> Add Meal\n            </Button>\n            <Button\n                onClick={() => {\n                    dispatch(newHealthCheck());\n                }}\n                className=\"new-meal\"\n                variant=\"success\">\n                <i className=\"fas fa-plus\"></i> Add Wellness Check\n            </Button>\n        </div>\n    );\n}\n","import React, { useState } from 'react';\nimport _ from 'lodash';\nimport { AsyncTypeahead } from 'react-bootstrap-typeahead';\nimport 'react-bootstrap-typeahead/css/Typeahead.css';\nimport * as API from './utils/api.js';\n\nexport default function InputAutoComplete(props) {\n    let {\n        defaultInputValue,\n        submit,\n        placeholder,\n        apiEndpoint,\n        allowNewItems,\n        suggestions,\n        clearOnSubmit\n    } = props;\n    \n    let [isLoading, setIsLoading] = useState(false);\n    let [options, setOptions] = useState([]);\n    let [value, setValue] = useState([]);\n\n    async function handleSearch(query) {\n        if (suggestions) { //if suggestions prop is supplied use supplied array\n            setOptions(suggestions);\n        } else { //if no suggestions prop is supplied, query api for suggestions\n            setIsLoading(true);\n            query = _.startCase(_.lowerCase(query));\n            let url = `suggestions/${apiEndpoint}/${query}`;\n            setOptions(await API.get(url))\n            setIsLoading(false);\n        }\n    }\n\n    function submitHandler(value) {\n        if (value.length <= 0) return;\n        let outputValue = value[0];\n        let newItem = false;\n        if (typeof outputValue === 'object') {\n            outputValue = outputValue.label;\n            newItem = true;\n        }\n        outputValue = _.startCase(_.lowerCase(outputValue));\n        if (allowNewItems && newItem) {\n            postValue(outputValue);\n        }\n        submit(outputValue);\n        if(clearOnSubmit) setValue(['']);\n    }\n\n    async function postValue(value) {\n        // let response = await fetch(`/${endpoint}`, {\n        //     method: 'POST',\n        //     headers: {\n        //         'Content-Type': 'application/json',\n        //         Authorization: `Bearer ${accessToken.value}`,\n        //     },\n        //     body: JSON.stringify({ ingredient: value }),\n        // });\n        await API.post(apiEndpoint, { value });\n    }\n\n    return (\n        <AsyncTypeahead\n            selectHintOnEnter={true}\n            id=\"autocomplete-input\"\n            minLength={1}\n            allowNew={allowNewItems}\n            delay={100}\n            newSelectionPrefix=\"Add a new item: \"\n            isLoading={isLoading}\n            options={options}\n            selected={value}\n            placeholder={placeholder}\n            onChange={(value) => {\n                setValue(value);\n                submitHandler(value);\n            }}\n            onSearch={handleSearch}\n            defaultInputValue={defaultInputValue ? defaultInputValue : ''}\n        />\n    );\n}\n","import React from 'react';\nimport { useState } from 'react';\nimport './IngredientPill.scss';\n\nexport default function IngredientPill(props) {\n    let { onClick } = props;\n\n    return (\n        <div className=\"ingredient-pill\">\n            <div\n                onClick={onClick}\n                className=\"pill-primary\">\n                {props.primaryText}\n            </div>\n        </div>\n    );\n}\n","import React from 'react';\nimport { useState } from 'react';\nimport Modal from 'react-bootstrap/Modal';\nimport Button from 'react-bootstrap/Button';\nimport Form from 'react-bootstrap/Form';\nimport Row from 'react-bootstrap/Row'\nimport Col from 'react-bootstrap/Col';\nimport { useDispatch, useSelector } from 'react-redux';\nimport _ from 'lodash';\n\nimport InputAutoComplete from 'components/common/InputAutoComplete';\nimport {\n    closeMealForm,\n    deleteIngredient,\n    formChange,\n} from './state/MealFormActions';\nimport Pill from 'components/IngredientPill';\nimport * as API from 'components/common/utils/api';\nimport { stringToUnixTime } from 'components/common/utils/DateHandler';\nimport './MealForm.scss';\nimport { setActivity } from 'components/activity/state/ActivityActions';\n\nexport default function MealForm(props) {\n    let [processing, setProcessing] = useState(false);\n    let state = useSelector((state) => state.mealForm);\n    const dispatch = useDispatch();\n\n    async function handleSubmit() {\n        try {\n            setProcessing(true);\n            let unixTime = stringToUnixTime(state.dateString, state.timeString);\n            let newMeal = {\n                ingredients: state.ingredients.map(\n                    (ingredient) => ingredient.name\n                ),\n                type: state.mealType,\n                time: unixTime,\n            };\n            if (state.new) await API.post('activity/meals', newMeal);\n            if (state.edit)\n                await API.put('activity/meals/' + state._id, newMeal);\n            setProcessing(false);\n            handleClose();\n            dispatch(setActivity());\n        } catch (error) {\n            console.log(error);\n            setProcessing(false);\n            handleClose();\n        }\n    }\n    async function handleClose() {\n        dispatch(closeMealForm());\n    }\n\n    function addIngredient(newIngredient) {\n        newIngredient = _.startCase(_.lowerCase(newIngredient));\n        if (state.ingredients.map(ingredient => ingredient.name).includes(newIngredient)) return;\n        dispatch(\n            formChange({\n                ingredients: [...state.ingredients, { name: newIngredient }],\n            })\n        );\n    }\n\n    return (\n        <Modal show={state.show} onHide={handleClose}>\n            <Modal.Header closeButton>\n                {state.edit && <Modal.Title>Edit Meal</Modal.Title>}\n                {state.new && <Modal.Title>Post New Meal</Modal.Title>}\n            </Modal.Header>\n            <Modal.Body>\n                <div className=\"meal-form-container\">\n                    <Row>\n                        <Col xs={12}>\n                            <InputAutoComplete\n                                submit={(value) => {\n                                    dispatch(formChange({ mealType: value }));\n                                }}\n                                suggestions={[\n                                    'Breakfast',\n                                    'Lunch',\n                                    'Dinner',\n                                    'Snack',\n                                    'Dessert',\n                                    'Drink',\n                                ]}\n                                defaultInputValue={state.mealType}\n                                placeholder=\"Meal Type (ie: Breakfast, Lunch, Dinner)\"\n                            />\n                        </Col>\n                    </Row>\n                    <Row>\n                        <Col xs={6}>\n                            <Form.Control\n                                type=\"date\"\n                                value={state.dateString}\n                                onChange={(e) => {\n                                    dispatch(\n                                        formChange({\n                                            dateString: e.target.value,\n                                        })\n                                    );\n                                }}\n                            />\n                        </Col>\n                        <Col xs={6}>\n                            <Form.Control\n                                type=\"time\"\n                                value={state.timeString}\n                                onChange={(e) => {\n                                    dispatch(\n                                        formChange({\n                                            timeString: e.target.value,\n                                        })\n                                    );\n                                }}\n                            />\n                        </Col>\n                    </Row>\n                    <Row>\n                        <Col>\n                            <InputAutoComplete\n                                submit={addIngredient}\n                                apiEndpoint=\"ingredients\"\n                                clearOnSubmit\n                                placeholder=\"Add Ingredients One at a Time\"\n                            />\n                        </Col>\n                    </Row>\n                    <div className=\"ingredient-list\">\n                        {state.ingredients.map((ingredient) => {\n                            return (\n                                <Pill\n                                    onClick={()=>{\n                                        dispatch(deleteIngredient(ingredient))\n                                    }}\n                                    key={ingredient.id}\n                                    primaryText={ingredient.name}\n                                />\n                            );\n                        })}\n                    </div>\n                </div>\n            </Modal.Body>\n            <Modal.Footer>\n                <Button variant=\"secondary\" onClick={handleClose}>\n                    Cancel\n                </Button>\n                {state.new && (\n                    <Button\n                        disabled={processing}\n                        variant=\"success\"\n                        onClick={handleSubmit}>\n                        {processing ? 'Posting' : 'Post Meal'}\n                    </Button>\n                )}\n                {state.edit && (\n                    <Button\n                        disabled={processing}\n                        variant=\"success\"\n                        onClick={handleSubmit}>\n                        {processing ? 'Saving' : 'Save Changes'}\n                    </Button>\n                )}\n            </Modal.Footer>\n        </Modal>\n    );\n}\n","import dayjs from 'dayjs';\nimport isYesterday from 'dayjs/plugin/isYesterday';\nimport isToday from 'dayjs/plugin/isToday';\nimport customParseFormat from 'dayjs/plugin/customParseFormat';\ndayjs().format();\ndayjs.extend(isYesterday);\ndayjs.extend(isToday);\ndayjs.extend(customParseFormat);\n\nfunction toDate(time) {\n    let date = dayjs.unix(time);\n    if (date.isYesterday()) return 'Yesterday';\n    if (date.isToday()) return 'Today'\n    let oneWeekAgo = dayjs().subtract(1, 'week')\n    if (date.isAfter(oneWeekAgo)){\n        return date.format('dddd')\n    }\n    return date.format('MMM DD');\n}\n\nfunction toSortedArray(dataObject){\n    let dataArray = Object.entries(dataObject).map(([key, val])=>{\n        return {...val} //IMPORTANT, CREATES SHALLOW COPY TO PREVENT MUTATING STATE\n    })\n    return dataArray.sort((a, b)=>{\n        return b.time - a.time\n    })\n}\n\nexport function create(dataObject) { \n    let dataArray = toSortedArray(dataObject)\n    return dataArray.reduce((acc, currentEntry) => {\n        currentEntry.date = toDate(currentEntry.time);\n        let lastSubArray = acc[acc.length - 1];\n        if (!lastSubArray) return [[currentEntry]];\n        let lastEntry = lastSubArray[lastSubArray.length - 1];\n        if (lastEntry.date === currentEntry.date) {\n            acc[acc.length - 1].unshift(currentEntry);\n            return acc;\n        }\n        acc.push([currentEntry]);\n        return acc;\n    }, []);\n}\n","import React, { useState } from 'react';\nimport Form from 'react-bootstrap/Form';\nimport Row from 'react-bootstrap/Row'\nimport Col from 'react-bootstrap/Col';\nimport ButtonGroup from 'react-bootstrap/ButtonGroup';\nimport Button from 'react-bootstrap/Button';\nimport Modal from 'react-bootstrap/Modal';\nimport _ from 'lodash';\nimport { useDispatch, useSelector } from 'react-redux';\nimport {\n    closeHealthCheckForm,\n    formChange,\n    deleteSymptom\n} from './state/healthCheckFormActions';\nimport InputAutoComplete from 'components/common/InputAutoComplete';\nimport Pill from 'components/IngredientPill';\nimport * as API from 'components/common/utils/api';\nimport { stringToUnixTime } from 'components/common/utils/DateHandler';\nimport './HealthCheckForm.scss';\nimport { setActivity } from 'components/activity/state/ActivityActions';\n\nexport default function HealthCheckForm() {\n    let [processing, setProcessing] = useState(false);\n    let state = useSelector((state) => state.healthCheckForm);\n    let dispatch = useDispatch();\n\n    function handleClose() {\n        dispatch(closeHealthCheckForm());\n    }\n    function handleMoodSelect(val) {\n        dispatch(\n            formChange({\n                mood: val,\n            })\n        );\n    }\n    function addSymptom(newSymptom) {\n        newSymptom = _.startCase(_.lowerCase(newSymptom));\n        console.log(state.symptoms);\n        if (\n            state.symptoms\n                .map((symptom) => symptom.description)\n                .includes(newSymptom)\n        )\n            return;\n        dispatch(\n            formChange({\n                symptoms: [...state.symptoms, { description: newSymptom }],\n            })\n        );\n    }\n    async function handleSubmit() {\n        try {\n            setProcessing(true);\n            let unixTime = stringToUnixTime(state.dateString, state.timeString);\n            let newHealthCheck = {\n                symptoms: state.symptoms.map((symptom) => symptom.description),\n                mood: state.mood,\n                time: unixTime,\n            };\n            if (state.new)\n                await API.post('activity/health-checks', newHealthCheck);\n            if (state.edit)\n                await API.put(\n                    'activity/health-checks/' + state._id,\n                    newHealthCheck\n                );\n            setProcessing(false);\n            handleClose();\n            dispatch(setActivity());\n        } catch (error) {\n            console.log(error);\n            setProcessing(false);\n            handleClose();\n        }\n    }\n\n    return (\n        <Modal show={state.show} onHide={handleClose}>\n            <Modal.Header closeButton>\n                {state.edit && <Modal.Title>Edit Wellness Check</Modal.Title>}\n                {state.new && (\n                    <Modal.Title>Post New Wellness Check</Modal.Title>\n                )}\n            </Modal.Header>\n            <Modal.Body>\n                <div className=\"health-check-form-container\">\n                    <Row>\n                        <Col xs={6}>\n                            <Form.Control\n                                type=\"date\"\n                                name=\"date\"\n                                value={state.dateString}\n                                onChange={(e) => {\n                                    dispatch(\n                                        formChange({\n                                            dateString: e.target.value,\n                                        })\n                                    );\n                                }}\n                            />\n                        </Col>\n                        <Col xs={6}>\n                            <Form.Control\n                                type=\"time\"\n                                name=\"time\"\n                                value={state.timeString}\n                                onChange={(e) => {\n                                    dispatch(\n                                        formChange({\n                                            timeString: e.target.value,\n                                        })\n                                    );\n                                }}\n                            />\n                        </Col>\n                    </Row>\n                    <Row>\n                        <Col xs={12}>\n                            <ButtonGroup style={{ display: 'flex' }}>\n                                <Button\n                                    onClick={() => handleMoodSelect(1)}\n                                    className=\"mood-button\"\n                                    variant={\n                                        state.mood === 1 ? 'secondary' : 'light'\n                                    }>\n                                    Grumpy\n                                </Button>\n                                <Button\n                                    onClick={() => handleMoodSelect(2)}\n                                    className=\"mood-button\"\n                                    variant={\n                                        state.mood === 2 ? 'secondary' : 'light'\n                                    }>\n                                    Neutral\n                                </Button>\n                                <Button\n                                    onClick={() => handleMoodSelect(3)}\n                                    className=\"mood-button\"\n                                    variant={\n                                        state.mood === 3 ? 'secondary' : 'light'\n                                    }>\n                                    Upbeat\n                                </Button>\n                            </ButtonGroup>\n                        </Col>\n                    </Row>\n                    <Row>\n                        <Col>\n                            <InputAutoComplete\n                                submit={addSymptom}\n                                clearOnSubmit\n                                placeholder=\"Add Symptoms One at a Time\"\n                                apiEndpoint=\"symptoms\"\n                            />\n                        </Col>\n                    </Row>\n                    <div className=\"symptom-list\">\n                        {state.symptoms.map((symptom, index) => {\n                            return (\n                                <Pill\n                                    onClick={() => {\n                                        dispatch(deleteSymptom(symptom));\n                                    }}\n                                    index={index}\n                                    key={index}\n                                    primaryText={symptom.description}\n                                />\n                            );\n                        })}\n                    </div>\n                </div>\n            </Modal.Body>\n            <Modal.Footer>\n                <Button variant=\"secondary\" onClick={handleClose}>\n                    Cancel\n                </Button>\n                {state.new && (\n                    <Button\n                        disabled={processing}\n                        variant=\"success\"\n                        onClick={handleSubmit}>\n                        {processing ? 'Posting' : 'Post Health Check'}\n                    </Button>\n                )}\n                {state.edit && (\n                    <Button\n                        disabled={processing}\n                        variant=\"success\"\n                        onClick={handleSubmit}>\n                        {processing ? 'Saving' : 'Save Changes'}\n                    </Button>\n                )}\n            </Modal.Footer>\n        </Modal>\n    );\n}\n","import React, { useEffect } from 'react';\nimport './Activity.scss';\nimport DateBlock from './DateBlock.jsx';\nimport AddButtonsContainer from 'components/activity/AddButtonsContainer';\nimport MealForm from 'components/meal_form/MealForm';\nimport * as FeedArray from './utils/feedArray';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { setActivity } from 'components/activity/state/ActivityActions';\nimport HealthCheckForm from 'components/health_check_form/HealthCheckForm';\n\nexport default function Activity(props) {\n    const dispatch = useDispatch();\n    let state = useSelector((state) => state);\n\n    useEffect(() => {\n        dispatch(setActivity());\n    }, [state.view]);\n\n    let activityFeed = FeedArray.create(state.activity.data);\n    \n    return (\n        <div className=\"activity-container\">\n            <div>\n                <AddButtonsContainer />\n                <MealForm />\n                <HealthCheckForm />\n                {activityFeed.map((dateBlock, index) => {\n                    return <DateBlock key={index} index={index} entries={dateBlock} />;\n                })}\n            </div>\n        </div>\n    );\n}\n","import React, { useState } from 'react';\nimport Sidebar from './Sidebar';\nimport Activity from './activity/Activity'\nimport { useSelector } from 'react-redux';\n\nexport default function Dashboard(props){\n    let state = useSelector(state => state.view)\n\n    return (\n        <div style={{position: 'relative'}}>\n            <Sidebar />\n            {(state.activity.active) && <Activity />}\n\n        </div>  \n    )\n}","import React, { useEffect } from 'react';\nimport Header from 'components/header/Header';\nimport Dashboard from './Dashboard';\nimport {useSelector, useDispatch} from 'react-redux'\nimport {attemptLogIn } from './common/state/UserStateActions.js'\n\nfunction App() {\n    let userState = useSelector(state => state.UserState)\n    const dispatch = useDispatch()\n\n\n    useEffect(() => dispatch(attemptLogIn()), []);\n\n    return (\n        <div>\n            <Header />\n\n            {userState.isLoggedIn && (\n                <Dashboard/>\n            )}\n        </div>\n    );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './components/App';\nimport './styles.scss';\nimport { Provider } from 'react-redux';\nimport store from './components/common/state/Store.js'\n\n\nReactDOM.render(\n    <Provider store={store}>\n        <App />\n    </Provider>,\n    document.getElementById('root')\n);\n"],"sourceRoot":""}